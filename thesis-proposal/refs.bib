% Encoding: UTF-8

@Book{ABB+16,
  author    = {Ahrendt, Wolfgang and Beckert, Bernhard and Bubel, Richard and Hahnle, Reiner and H. Schmitt, Peter and Ulbrich, Mattias},
  publisher = {Springer},
  title     = {Deductive software verification---the {KeY} book},
  year      = {2016},
}

@InCollection{Abd95,
  author    = {Abdallah, Areski Nait},
  booktitle = {The Logic of Partial Information},
  publisher = {Springer},
  title     = {Partial first-order logic},
  year      = {1995},
  address   = {Berlin, Heidelberg},
  chapter   = {14},
  isbn      = {9783642781629},
  pages     = {425--452},
  series    = {Monographs in Theoretical Computer Science. An EATCS Series},
  abstract  = {We now discuss the model theory of (classical) first-order logic together with partial interpretations. As in the propositional case, the syntax of partial firstorder logic is essentially the same as in the classical case. The main difference from classical first-order logic is the model theory, and the resulting formal axiomatics. The reader is referred e.g. to Smullyan [94] for a comprehensive discussion of classical first-order logic.},
  comment   = {partial fisrt-order logic
partial FOL},
  doi       = {10.1007/978-3-642-78160-5_14},
}

@Article{ACCL91,
  author    = {Abadi, M. and Cardelli, L. and Curien, P.-L. and L{\'{e}}vy, J.-J.},
  journal   = {Journal of Functional Programming},
  title     = {Explicit substitutions},
  year      = {1991},
  number    = {4},
  pages     = {375--416},
  volume    = {1},
  doi       = {10.1017/S0956796800000186},
  publisher = {Cambridge University Press},
}

@InProceedings{ACD08,
  author    = {Abel, Andreas and Coquand, Thierry and Dybjer, Peter},
  booktitle = {Functional and Logic Programming},
  title     = {On the algebraic foundation of proof assistants for intuitionistic type theory},
  year      = {2008},
  address   = {Berlin, Heidelberg},
  editor    = {Garrigue, Jacques and Hermenegildo, Manuel V.},
  pages     = {3--13},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {An algebraic presentation of Martin-L{\"o}f's intuitionistic type theory is given which is based on the notion of a category with families with extra structure. We then present a type-checking algorithm for the normal forms of this theory, and sketch how it gives rise to an initial category with families with extra structure. In this way we obtain a purely algebraic formulation of the correctness of the type-checking algorithm which provides the core of proof assistants for intuitionistic type theory.},
  isbn      = {978-3-540-78969-7},
}

@InCollection{ACHH93,
  author    = {Alur, Rajeev and Courcoubetis, Costas and Henzinger, Thomas A. and Ho, Pei-Hsin},
  booktitle = {Hybrid systems},
  publisher = {Springer},
  title     = {Hybrid automata: {A}n algorithmic approach to the specification and verification of hybrid systems},
  year      = {1993},
  pages     = {209--229},
}

@InProceedings{ACP+08,
  author    = {Aydemir, Brian and Chargu\'{e}raud, Arthur and Pierce, Benjamin C. and Pollack, Randy and Weirich, Stephanie},
  booktitle = {Proceedings of the 35\textsuperscript{th} Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL'08)},
  title     = {Engineering formal metatheory},
  year      = {2008},
  address   = {New York, NY, USA},
  pages     = {3--15},
  publisher = {ACM},
  doi       = {10.1145/1328438.1328443},
  isbn      = {9781595936899},
  numpages  = {13},
}

@InProceedings{AdCFN18,
  author    = {Ayala-Rinc{\'o}n, Mauricio and de Carvalho-Segundo, Washington and Fern{\'a}ndez, Maribel and Nantes-Sobrinho, Daniele},
  booktitle = {Proceedings of the 27\textsuperscript{th} International Symposium on Logic-Based Program Synthesis and Transformation (LOPSTR'17)},
  title     = {Nominal {C}-unification},
  year      = {2018},
  address   = {Namur, Belgium},
  pages     = {235--251},
  publisher = {Springer International Publishing},
  series    = {Lecture Notes in Computer Science},
  volume    = {10855},
  abstract  = {Nominal unification is an extension of first-order unification that takes into account the {\$}{\$}{\backslash}alpha {\$}{\$}-equivalence relation generated by binding operators, following the nominal approach. We propose a sound and complete procedure for nominal unification with commutative operators, or nominal C-unification for short, which has been formalised in Coq. The procedure transforms nominal C-unification problems into simpler (finite families) of fixed point constraints, whose solutions can be generated by algebraic techniques on combinatorics of permutations.},
  isbn      = {978-3-319-94460-9},
}

@InProceedings{AFN16,
  author    = {Mauricio Ayala-Rinc{\'o}n and Maribel Fern{\'a}ndez and Daniele Nantes-Sobrinho},
  booktitle = {Proceedings of the 1\textsuperscript{st} International Conference on Formal Structures for Computation and Deduction (FSCD'16)},
  title     = {Nominal narrowing},
  year      = {2016},
  address   = {Dagstuhl, Germany},
  pages     = {1--17},
  publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  volume    = {52},
  annote    = {Keywords: Nominal Rewriting, Nominal Unification, Matching, Narrowing, Equational Theories},
  doi       = {10.4230/LIPIcs.FSCD.2016.11},
  isbn      = {978-3-95977-010-1},
  issn      = {1868-8969},
  url       = {http://drops.dagstuhl.de/opus/volltexte/2016/5983},
  urn       = {urn:nbn:de:0030-drops-59832},
}

@Misc{agda-ias,
  author       = {Andrew Pitts},
  howpublished = {Available at \url{www.cl.cam.ac.uk/users/amp12/agda/initial-T-algebras}.},
  month        = nov,
  title        = {Construction of the initial algebra for a strictly positiveendofunctor on {S}et using uniqueness of identity proofs, functionextensionality, quotients types and sized types.},
  year         = {2019},
}

@InProceedings{AGS12,
  author    = {Steve Awodey and Nicola Gambino and Kristina Sojakova},
  booktitle = {Proceedings ot the 27\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science (LICS'12)},
  title     = {Inductive types in homotopy type theory},
  year      = {2012},
  address   = {Dubrovnik, Croatia},
  pages     = {95--104},
  publisher = {IEEE},
}

@Article{AGS17,
  author     = {Awodey, Steve and Gambino, Nicola and Sojakova, Kristina},
  journal    = {Journal of the ACM},
  title      = {Homotopy-initial algebras in type theory},
  year       = {2017},
  issn       = {0004-5411},
  month      = jan,
  number     = {6},
  volume     = {63},
  address    = {New York, NY, USA},
  articleno  = {51},
  doi        = {10.1145/3006383},
  issue_date = {February 2017},
  keywords   = {Homotopy type theory, initial algebra, induction, recursion, W-types},
  numpages   = {45},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3006383},
}

@Article{ASF+SDF,
  author    = {Mark van den Brand and Arie van Deursen and Jan Heering and Hayco de Jong and Merijn de Jonge and Tobias Kuipers and Paul Klint and Leon Moonen and Pieter A. Olivier and Jeroen Scheerder and Jurgen J. Vinju and Eelco Visser and Joost Visser},
  journal   = {Electronic Notes in Theoretical Computer Science},
  title     = {The {ASF+SDF} meta-environment: a component-based language development environment},
  year      = {2001},
  number    = {2},
  pages     = {3--8},
  volume    = {44},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/entcs/BrandDHJJKKMOSVVV01.bib},
  doi       = {10.1016/S1571-0661(04)80917-4},
  timestamp = {Sun, 26 Apr 2020 17:09:18 +0200},
  url       = {https://doi.org/10.1016/S1571-0661(04)80917-4},
}

@Book{Bar84,
  author    = {Barendregt, Henk},
  publisher = {College Publications},
  title     = {The lambda calculus, its syntax and semantics},
  year      = {1984},
  address   = {King's College London, Strand, London WC2R 2LS, UK},
  isbn      = {9781848900660},
  series    = {Studies in Logic},
  doi       = {10.2307/2274112},
}

@Article{Bar91,
  author  = {Barendregt, Henk},
  journal = {Journal of Functional Programming},
  title   = {Introduction to generalized type systems},
  year    = {1991},
  number  = {2},
  pages   = {125--154},
  volume  = {1},
}

@InCollection{Bar93,
  author    = {Barendregt, Henk},
  booktitle = {Handbook of Logic in Computer Science},
  publisher = {Oxford University Press},
  title     = {Lambda calculi with types},
  year      = {1993},
  address   = {UK},
  chapter   = {2},
  isbn      = {0198537611},
  pages     = {117--309},
  volume    = {2, background: computational structures},
  doi       = {10.5555/162552.162561},
  numpages  = {193},
}

@Article{BB92,
  author  = {G{\'{e}}rard Berry and G{\'{e}}rard Boudol},
  journal = {Theoretical Computer Science},
  title   = {The chemical abstract machine},
  year    = {1992},
  number  = {1},
  pages   = {217--248},
  volume  = {96},
  doi     = {10.1016/0304-3975(92)90185-I},
}

@Article{BBC86,
  author   = {Gilles Bernot and Michel Bidoit and Christine Choppy},
  journal  = {Theoretical Computer Science},
  title    = {Abstract data types with exception handling: {A}n initial approach based on a distinction between exceptions and errors},
  year     = {1986},
  issn     = {0304-3975},
  pages    = {13--45},
  volume   = {46},
  abstract = {In this paper, a new semantics for exception handling in algebraic specifications is provided. Our formalism allows all forms of exception and error handling (several error messages, implict error propagation rule, exception recovery policy), while preserving the existence of initial models. The main concepts of our approach are: the distinction between exception and error, and the introduction of exception labelling allowing to formalize various error messages. This formalism allows use of congruences in a similar manner as in the classical abstract data type theory. Moreover, we show how a functional semantics of enrichment can be carried over to our framework, and we show how hierarchical consistency and sufficient completeness can be redefined. Then, we briefly sketch out how abstract implementations can be extended in order to include exception handling. Indeed, abstract implementation of specifications including exception handling was one of main motivations for the work reported here.},
  doi      = {https://doi.org/10.1016/0304-3975(86)90019-8},
  keywords = {Abstract data types, exception algebras, exception handling, exception recovery, implementation, initial model, structured specifications},
  url      = {http://www.sciencedirect.com/science/article/pii/0304397586900198},
}

@Book{BC10,
  author    = {Bertot, Yves and Castran, Pierre},
  publisher = {Springer},
  title     = {Interactive theorem proving and program development: {Coq}'{A}rt the calculus of inductive constructions},
  year      = {2010},
}

@InProceedings{BCD+06,
  author    = {Barnett, Mike and Chang, Bor-Yuh Evan and DeLine, Robert and Jacobs, Bart and Leino, K. Rustan M.},
  booktitle = {Revised Lectures of the 4\textsuperscript{th} International Symposium on Formal Methods for Components and Objects (FMCO'05)},
  title     = {{B}oogie: {A} modular reusable verifier for object-oriented programs},
  year      = {2006},
  pages     = {364--387},
  publisher = {Springer},
  volume    = {4111},
}

@InProceedings{BCD+88,
  author    = {Patrick Borras and Dominique Cl{\'e}ment and Thierry Despeyroux and Janet Incerpi and Gilles Kahn and Bernard Lang and V. Pascual},
  booktitle = {Proceedings of the 3\textsuperscript{rd} ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (SDE'88)},
  title     = {{CENTAUR}: {T}he system},
  year      = {1988},
  pages     = {14--24},
  publisher = {ACM},
}

@InProceedings{BCO04,
  author    = {Berdine, Josh and Calcagno, Cristiano and O{\textquoteright}Hearn, Peter W.},
  booktitle = {Proceedings of the 24\textsuperscript{th} International Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS'04)},
  title     = {A decidable fragment of separation logic},
  year      = {2004},
  pages     = {97--109},
  publisher = {Springer},
  volume    = {3328},
}

@InProceedings{BCO05,
  author    = {Berdine, Josh and Calcagno, Cristiano and O{\textquoteright}Hearn, Peter W.},
  booktitle = {Proceedings of the 3\textsuperscript{rd} Asian conference on Programming Languages and Systems (APLAS'05)},
  title     = {Symbolic execution with separation logic},
  year      = {2005},
  pages     = {52--68},
  publisher = {Springer},
  volume    = {3780},
}

@InProceedings{BDES09,
  author    = {Ahmed Bouajjani and Cezara Dr{\u{a}}goi and Constantin Enea and Mihaela Sighireanu},
  booktitle = {Proceedings of the 20\textsuperscript{th} International Conference on Concurrency Theory (CONCUR'09)},
  title     = {A logic-based framework for reasoning about composite data structures},
  year      = {2009},
  pages     = {178--195},
  publisher = {Springer},
  volume    = {5710},
}

@Article{BE93,
  author    = {Bucciarelli, Antonio and Ehrhard, Thomas},
  journal   = {Theoretical Computer Science},
  title     = {A theory of sequentiality},
  year      = {1993},
  number    = {2},
  pages     = {273--291},
  volume    = {113},
  doi       = {10.1016/0304-3975%2893%2990005-E},
  publisher = {Elsevier},
}

@Book{Bee85,
  author    = {M. J. Beeson},
  publisher = {Springer-Verlag Berlin Heidelberg},
  title     = {Foundations of constructive mathematics},
  year      = {1985},
  isbn      = {978-3-642-68952-9},
  series    = {A Series of Modern Surveys in Mathematics},
  volume    = {6},
  doi       = {10.1007/978-3-642-68952-9},
}

@Article{Ber00,
  author  = {Berline, Chantal},
  journal = {Theoretical Computer Science},
  title   = {From computation to foundations via functions and application: the $\lambda$-calculus and its webbed models},
  year    = {2000},
  number  = {1},
  pages   = {81--161},
  volume  = {249},
  doi     = {10.1016/S0304-3975(00)00057-8},
}

@Article{Ber06,
  author    = {Berline, Chantal},
  journal   = {Mathematical Structures in Computer Science},
  title     = {Graph models of $\lambda$-calculus at work, and variations},
  year      = {2006},
  number    = {2},
  pages     = {185--221},
  volume    = {16},
  doi       = {10.1017/S0960129506005123},
  publisher = {Cambridge University Press},
}

@InProceedings{Ber78,
  author    = {Berry, G{\'e}rard},
  booktitle = {Automata, Languages and Programming},
  title     = {Stable models of typed $\lambda$-calculi},
  year      = {1978},
  address   = {Berlin, Heidelberg},
  pages     = {72--89},
  publisher = {Springer},
  abstract  = {Following Scott, the denotational semantics of programming languages are usually built from the notion of continuous functions. The need for restricted models has been emphasized by Plotkin and Milner, which showed thats continuous function models did not capture all operational properties of ALGOL-like sequential languages. We present new model constructions from a notion of stable function. This requires the introduction of two different orderings between stable functions which give very different cpo structures to the function spaces. We show that Milner's fully abstract model of Plotkin's PCP language only contains stable functions.},
  doi       = {10.5555/646232.682069},
  isbn      = {978-3-540-35807-7},
}

@InBook{BG82,
  author    = {Burstall, R. M. and Goguen, J. A.},
  chapter   = {11},
  pages     = {329--349},
  publisher = {Springer},
  title     = {Algebras, theories and freeness: an introduction for computer scientists},
  year      = {1982},
  address   = {Dordrecht, Netherlands},
  series    = {NATO Advanced Study Institutes Series (Series C --- Mathematical and Physical Sciences)},
  volume    = {91},
  abstract  = {In the last ten years or so a lot of algebraic ideas have wormed their way into Computer Science, particularly in work connected with correctness of compilers, with abstract data types and with specification. We have been among those responsible [Burstall and Goguen 1980, 1981]. Most papers begin with a compressed section of definitions, but it is difficult for the well-disposed outsider to make much of these. Reference to books for algebraists, such as Graetzer [1979], or even to those angled towards automata theory [Arbib and Manes 1975] may not be encouraging. So it is perhaps worthwhile to present some of the key algebraic ideas in a leisurely and, we hope, intuitive form, emphasising the Computer Science connection. Some water has flowed under the bridge since one of us was last involved in an attempt to do this [Goguen, Thatcher, Wagner and Wright 1975].},
  booktitle = {Theoretical Foundations of Programming Methodology: Lecture Notes of an International Summer School, directed by F. L. Bauer, E. W. Dijkstra and C. A. R. Hoare},
  doi       = {10.1007/978-94-009-7893-5_11},
  url       = {https://doi.org/10.1007/978-94-009-7893-5_11},
}

@InProceedings{BH09,
  author    = {Bj{\o}rner, Nikolaj and Hendrix, Joe},
  booktitle = {Proceedings of the 21\textsuperscript{st} International Conference on Computer Aided Verification (CAV'09)},
  title     = {Linear functional fixed-points},
  year      = {2009},
  pages     = {124--139},
  publisher = {Springer},
  volume    = {5643},
}

@TechReport{BHK87,
  author      = {J. A. Bergstra and J. Heering and P. Klint},
  institution = {CWI Amsterdam},
  title       = {{ASF}---an algebraic specification formalism},
  year        = {1987},
  number      = {CS-R8504},
}

@InCollection{BHK89,
  author    = {J. A. Bergstra and J. Heering and P. Klint},
  booktitle = {Algebraic Specification},
  publisher = {ACM Press in co-operation with Addison-Wesley},
  title     = {The algebraic specification formalism {ASF}},
  year      = {1989},
  address   = {New York, NY, and Reading, MA},
  pages     = {1--66},
  series    = {ACM Press Frontier Series},
}

@Article{BK83,
  author    = {Jan A. Bergstra and Jan Willem Klop},
  journal   = {J. Inf. Process. Cybern.},
  title     = {Initial algebra specifications for parametrized data types},
  year      = {1983},
  number    = {1/2},
  pages     = {17--31},
  volume    = {19},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/eik/BergstraK83.bib},
  timestamp = {Fri, 06 Mar 2020 22:02:20 +0100},
}

@PhdThesis{Blo97,
  author = {Bloo, C. J.},
  school = {Technische Universiteit Eindhoven},
  title  = {Preservation of termination for explicit substitution},
  year   = {1997},
  doi    = {10.6100/IR499858},
}

@Book{BM77,
  author    = {John Bell and Moshe Machover},
  publisher = {North Holland},
  title     = {A course in mathematical logic},
  year      = {1977},
  address   = {Amsterdam, Netherlands},
  isbn      = {9780720428445},
}

@Article{BohmB85,
  author    = {Corrado B{\"{o}}hm and Alessandro Berarducci},
  journal   = {Theor. Comput. Sci.},
  title     = {Automatic synthesis of typed lambda-programs on term algebras},
  year      = {1985},
  pages     = {135--154},
  volume    = {39},
  abstract  = {From Introduction: The high level language used is the second-order or polymorphic typed lambda calculus (Lambda). More precisely, heterogeneous term algebras correspond, by a Completeness Theorem (Theorem 6.3), to a natural restriction of the types of Lambda, namely
those of degree =. Every such type uniquely identifies the corresponding term
algebra, together with its constructors or basic functions; moreover, it can be
interpreted as an induction principle which may be used to systematically remove
recursion from the iterative definitions of functions over the algebraic data structures.},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/BohmB85.bib},
  doi       = {10.1016/0304-3975(85)90135-5},
  timestamp = {Fri, 02 Nov 2018 09:30:35 +0100},
  url       = {https://doi.org/10.1016/0304-3975(85)90135-5},
}

@InProceedings{Bor00,
  author    = {Bornat, Richard},
  booktitle = {Proceedings of the 5\textsuperscript{th} International Conference on Mathematics of Program Construction (MPC'00)},
  title     = {Proving pointer programs in {H}oare logic},
  year      = {2000},
  pages     = {102--126},
  publisher = {Springer},
  volume    = {1837},
}

@InProceedings{BPR18,
  author    = {Blanchette, Jasmin Christian and Peltier, Nicolas and Robillard, Simon},
  booktitle = {Proceedings of the 9\textsuperscript{th} International Joint Conference on Automated Reasoning (IJCAR'18)},
  title     = {Superposition with datatypes and codatatypes},
  year      = {2018},
  pages     = {370--387},
  publisher = {Springer},
  abstract  = {The absence of a finite axiomatization of the first-order theory of datatypes and codatatypes represents a challenge for automatic theorem provers. We propose two approaches to reason by saturation in this theory: one is a conservative theory extension with a finite number of axioms; the other is an extension of the superposition calculus, in conjunction with axioms. Both techniques are refutationally complete with respect to nonstandard models of datatypes and nonbranching codatatypes. They take into account the acyclicity of datatype values and the existence and uniqueness of cyclic codatatype values. We implemented them in the first-order prover Vampire and compare them experimentally.},
}

@InProceedings{BR15,
  author    = {Bogd\u{a}na\c{s}, Denis and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 42\textsuperscript{nd} Symposium on Principles of Programming Languages (POPL'15)},
  title     = {{K}-{J}ava: {A} complete semantics of {J}ava},
  year      = {2015},
  address   = {Mumbai, India},
  pages     = {445--456},
  publisher = {ACM},
}

@InProceedings{Bra11,
  author    = {Brady, Edwin},
  booktitle = {Proceedings of the 5\textsuperscript{th} ACM Workshop on Programming Languages Meets Program Verification (PLPV '11)},
  title     = {{IDRIS}---systems programming meets full dependent types},
  year      = {2011},
  pages     = {43--54},
  publisher = {ACM},
  acmid     = {1929536},
  isbn      = {978-1-4503-0487-0},
  location  = {Austin, Texas, USA},
  numpages  = {12},
}

@Book{BRV01,
  author    = {Blackburn, Patrick and Rijke, Maarten de and Venema, Yde},
  publisher = {Cambridge University Press},
  title     = {Modal logic},
  year      = {2001},
  address   = {One Liberty Plaza, New York, NY},
  isbn      = {0-521-80200-8},
}

@InProceedings{BS04,
  author    = {Antonio Bucciarelli and Antonino Salibra},
  booktitle = {Proceedings of the 19\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science (LICS'04)},
  title     = {The sensible graph theories of lambda calculus},
  year      = {2004},
  address   = {Turku, Finland},
  month     = jul,
  pages     = {276--285},
  publisher = {IEEE},
  doi       = {10.1109/LICS.2004.1319622},
  issn      = {1043-6871},
  keywords  = {graph theory;lambda calculus;sensible /spl lambda/-theories;equational extensions;untyped lambda calculus;unsolvable /spl lambda/-terms;nonsyntactic model;equational theory;least sensible /spl lambda/-theory;lambda calculus semantics;graph models;greatest sensible graph theory;Bohm tree;solvable /spl lambda/-terms;minimal lambda theory;Calculus;Graph theory;Tree graphs;Differential equations;Character generation;Kernel;Topology;Lattices;Mathematical model;Logic},
}

@InProceedings{BSM16,
  author    = {van Binsbergen, L. Thomas and Sculthorpe, Neil and Mosses, Peter D.},
  booktitle = {Companion Proceedings of the 15\textsuperscript{th} International Conference on Modularity},
  title     = {Tool support for component-based semantics},
  year      = {2016},
  pages     = {8--11},
  publisher = {ACM},
}

@Article{BT98,
  author    = {Blackburn, Patrick and Tzakova, Miroslava},
  journal   = {Logic Journal of IGPL},
  title     = {Hybrid completeness},
  year      = {1998},
  number    = {4},
  pages     = {625--650},
  volume    = {6},
  publisher = {Oxford University Press},
}

@InCollection{Bun01,
  author    = {Alan Bundy},
  booktitle = {Handbook of automated reasoning},
  publisher = {North Holland},
  title     = {The automation of proof by mathematical induction},
  year      = {2001},
  address   = {Amsterdam},
  chapter   = {13},
  editor    = {Alan Robinson and Andrei Voronkov},
  pages     = {845--911},
  doi       = {10.1016/B978-044450813-3/50015-1},
}

@Article{Bur68,
  author  = {Burstall, R. M.},
  journal = {Machine Intelligence},
  title   = {Semantics of assignment},
  year    = {1968},
  pages   = {3--20},
  volume  = {2},
}

@Article{Bur69,
  author   = {Burstall, R. M.},
  journal  = {The Computer Journal},
  title    = {Proving properties of programs by structural induction},
  year     = {1969},
  issn     = {0010-4620},
  number   = {1},
  pages    = {41--48},
  volume   = {12},
  abstract = {This paper discusses the technique of structural induction for proving theorems about programs. This technique is closely related to recursion induction but makes use of the inductive definition of the data structures handled by the programs. It treats programs with recursion but without assignments or jumps. Some syntactic extensions to Landin's functional programming language ISWIM are suggested which make it easier to program the manipulation of data structures and to develop proofs about such programs. Two sample proofs are given to demonstrate the technique, one for a tree sorting algorithm and one for a simple compiler for expressions.},
  doi      = {10.1093/comjnl/12.1.41},
}

@InCollection{Bur93,
  author    = {Burmeister, Peter},
  booktitle = {Algebras and orders},
  publisher = {Springer},
  title     = {Partial algebras---an introductory survey},
  year      = {1993},
  address   = {Dordrecht, Netherlands},
  isbn      = {9789401706971},
  pages     = {1--70},
  series    = {NATO ASI Series},
  volume    = {389},
  abstract  = {Partial algebras are among the basic mathematical structures implemented on computers. Many-sorted algebras are basically partial algebras, too. These notes are meant to introduce into a theory of and a language for partial algebras in such a way that also a specification of (many-sorted) partial algebras as abstract data types can easily be performed. Besides the terminology and constructions from universal algebra (homomorphisms, generalized recursion theorem, epimorphism theorem, free partial algebras) also such from logic (existence equations and elementary implications), model theory (preservation and reflection of formulas by mappings) and from (elementary) category theory (factorization systems) prove to be quite useful for a good description of the arising concepts, as is shown at the end by the formulation of a ``Meta Birkhoff Theorem''.},
  doi       = {10.1007/978-94-017-0697-1_1},
}

@InProceedings{Cap99,
  author    = {Capretta, Venanzio},
  booktitle = {Theorem Proving in Higher Order Logics},
  title     = {Universal algebra in type theory},
  year      = {1999},
  address   = {Berlin, Heidelberg},
  editor    = {Bertot, Yves and Dowek, Gilles and Th{\'e}ry, Laurent and Hirschowitz, Andr{\'e} and Paulin, Christine},
  pages     = {131--148},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present a development of Universal Algebra inside Type Theory, formalized using the proof assistant Coq. We define the notion of a signature and of an algebra over a signature. We use setoids, i.e. types endowed with an arbitrary equivalence relation, as carriers for algebras. In this way it is possible to define the quotient of an algebra by a congruence. Standard constructions over algebras are defined and their basic properties are proved formally. To overcome the problem of defining term algebras in a uniform way, we use types of trees that generalize wellorderings. Our implementation gives tools to define new algebraic structures, to manipulate them and to prove their properties.},
  isbn      = {978-3-540-48256-7},
}

@Article{Car96,
  author    = {Cardelli, Luca},
  journal   = {ACM Computing Surveys (CSUR)},
  title     = {Type systems},
  year      = {1996},
  number    = {1},
  pages     = {263--264},
  volume    = {28},
  publisher = {ACM New York, NY, USA},
}

@Article{CASL,
  author   = {Egidio Astesiano and Michel Bidoit and H\'{e}l\`{e}ne Kirchner and Bernd Krieg-Br\"{u}ckner and Peter D. Mosses and Donald Sannella and Andrzej Tarlecki},
  journal  = {Journal of Theoretical Computer Science},
  title    = {{CASL}: the common algebraic specification language},
  year     = {2002},
  issn     = {0304-3975},
  note     = {Current trends in Algebraic Development Techniques},
  number   = {2},
  pages    = {153--196},
  volume   = {286},
  abstract = {The Common Algebraic Specification Language (CASL) is an expressive language for the formal specification of functional requirements and modular design of software. It has been designed by COFI, the international Common Framework Initiative for algebraic specification and development. It is based on a critical selection of features that have already been explored in various contexts, including subsorts, partial functions, first-order logic, and structured and architectural specifications. CASL should facilitate interoperability of many existing algebraic prototyping and verification tools. This paper gives an overview of the CASL design. The major issues that had to be resolved in the design process are indicated, and all the main concepts and constructs of CASL are briefly explained and illustrated --- the reader is referred to the CASL Language Summary for further details. Some familiarity with the fundamental concepts of algebraic specification would be advantageous.},
  doi      = {https://doi.org/10.1016/S0304-3975(01)00368-1},
  url      = {http://www.sciencedirect.com/science/article/pii/S0304397501003681},
}

@Article{CDE+02,
  author  = {Clavel, Manuel and Dur{\'a}n, Francisco and Eker, Steven and Lincoln, Patrick and Mart{\i}-Oliet, Narciso and Meseguer, Jos{\'e} and Quesada, Jos{\'e}},
  journal = {Journal of Theoretical Computer Science},
  title   = {{M}aude: specification and programming in rewriting logic},
  year    = {2002},
  number  = {2},
  pages   = {187--243},
  volume  = {285},
}

@Manual{CDE+20,
  title        = {Maude manual (version 3.0)},
  author       = {Manuel Clavel and Francisco Dur{\'{a}}n and Steven Eker and Santiago Escobar and Patrick Lincoln and Narciso Mart{\'{i}}-Oliet and Jos{\'{e}} Meseguer and Rub{\'{e}}n Rubio and Carolyn Talcott},
  organization = {SRI International},
  year         = {2020},
  url          = {http://maude.lcc.uma.es/maude30-manual-html/maude-manual.html},
}

@Misc{CDG+07,
  author       = {H. Comon and M. Dauchet and R. Gilleron and C. L\"oding and F. Jacquemard and D. Lugiez and S. Tison and M. Tommasi},
  howpublished = {Available on: \url{http://www.grappa.univ-lille3.fr/tata}},
  note         = {Release October 12\textsuperscript{th}, 2007},
  title        = {Tree automata techniques and applications},
  year         = {2007},
}

@InProceedings{CDH+09,
  author    = {Cohen, Ernie and Dahlweid, Markus and Hillebrand, Mark and Leinenbach, Dirk and Moskal, Micha{\l} and Santen, Thomas and Schulte, Wolfram and Tobies, Stephan},
  booktitle = {Proceedings of the 22\textsuperscript{nd} International Conference on Theorem Proving in Higher Order Logics (TPHOLs'09)},
  title     = {{VCC}: {A} practical system for verifying concurrent {C}},
  year      = {2009},
  pages     = {23--42},
  publisher = {Springer},
  volume    = {5674},
  abstract  = {VCC is an industrial-strength verification environment for low-level concurrent system code written in C. VCC takes a program (annotated with function contracts, state assertions, and type invariants) and attempts to prove the correctness of these annotations. It includes tools for monitoring proof attempts and constructing partial counterexample executions for failed proofs. This paper motivates VCC, describes our verification methodology, describes the architecture of VCC, and reports on our experience using VCC to verify the Microsoft Hyper-V hypervisor.},
  isbn      = {978-3-642-03359-9},
}

@Article{CDNQ12,
  author     = {Chin, Wei-Ngan and David, Cristina and Nguyen, Huu Hai and Qin, Shengchao},
  journal    = {Journal of Science of Computer Programming},
  title      = {Automated verification of shape, size and bag properties via user-defined predicates in separation logic},
  year       = {2012},
  issn       = {0167-6423},
  number     = {9},
  pages      = {1006--1036},
  volume     = {77},
  acmid      = {2222283},
  issue_date = {August, 2012},
  numpages   = {31},
  publisher  = {Elsevier North-Holland, Inc.},
}

@Book{CE12,
  author    = {Courcelle, Bruno and Engelfriet, Joost},
  publisher = {Cambridge University Press},
  title     = {Graph structure and monadic second-order logic: a language-theoretic approach},
  year      = {2012},
  address   = {England, UK},
  volume    = {138},
  doi       = {10.1017/CBO9780511977619},
}

@InProceedings{CFK14,
  author       = {Clarkson, Michael R and Finkbeiner, Bernd and Koleini, Masoud and Micinski, Kristopher K and Rabe, Markus N and S{\'a}nchez, C{\'e}sar},
  booktitle    = {International Conference on Principles of Security and Trust},
  title        = {Temporal logics for hyperproperties},
  year         = {2014},
  organization = {Springer},
  pages        = {265--284},
}

@Article{CH06,
  author  = {Karl Crary and Robert Harper},
  journal = {SIGACT News Logic Column 16},
  title   = {Higher-order abstract syntax: setting the record straight},
  year    = {2006},
  number  = {3},
  pages   = {1--4},
  volume  = {37},
}

@PhdThesis{CH86,
  author = {Coquand, Thierry and Huet, G{\'e}rard},
  school = {INRIA},
  title  = {The calculus of constructions},
  year   = {1986},
}

@Article{Che05,
  author  = {James Cheney},
  journal = {SIGACT News Logic Column 14},
  title   = {Nominal logic and abstract syntax},
  year    = {2005},
  number  = {4},
  pages   = {47--69},
  volume  = {36},
}

@Article{Che06,
  author  = {James Cheney},
  journal = {Journal of Symbolic Logic},
  title   = {Completeness and {H}erbrand theorems for nominal logic},
  year    = {2006},
  number  = {1},
  pages   = {299--320},
  volume  = {71},
}

@Article{Che14,
  author   = {Cheney, James},
  journal  = {Journal of Logic and Computation},
  title    = {A simple sequent calculus for nominal logic},
  year     = {2014},
  number   = {2},
  pages    = {699--726},
  volume   = {26},
  abstract = {Nominal logic is a variant of first-order logic that provides support for reasoning about bound names in abstract syntax. A key feature of nominal logic is the new-quantifier, which quantifies over fresh names (names not appearing in any values considered so far). Previous attempts have been made to develop convenient rules for reasoning with the new-quantifier, but we argue that none of these attempts is completely satisfactory. In this article we develop a new sequent calculus for nominal logic in which the rules for the new-quantifier are much simpler than in previous attempts. We also prove several structural and metatheoretic properties, including cut-elimination, consistency and equivalence to Pitts' axiomatization of nominal logic.},
  doi      = {10.1093/logcom/exu024},
}

@InProceedings{Chl08,
  author    = {Adam Chlipala},
  booktitle = {Proceedings of the 13\textsuperscript{th} ACM SIGPLAN International Conference on Functional Programming (ICFP'08)},
  title     = {Parametric higher-order abstract syntax for mechanized semantics},
  year      = {2008},
  address   = {British Columbia, Canada},
  pages     = {143--156},
  publisher = {ACM},
}

@Article{Chu40,
  author    = {Church, Alonzo},
  journal   = {The Journal of Symbolic Logic},
  title     = {A formulation of the simple theory of types},
  year      = {1940},
  number    = {2},
  pages     = {56--68},
  volume    = {5},
  publisher = {Cambridge University Press},
}

@Book{Chu41,
  author    = {Church, Alonzo},
  publisher = {Princeton University Press},
  title     = {The calculi of lambda-conversion},
  year      = {1941},
  address   = {Princeton, New Jersey, USA},
  abstract  = {The book description for the forthcoming "The Calculi of Lambda Conversion. (AM-6)" is not yet available.},
  doi       = {10.2307/2267126},
}

@InProceedings{CJT15,
  author    = {Chu, Duc-Hiep and Jaffar, Joxan and Trinh, Minh-Thai},
  booktitle = {Proceedings of the 36\textsuperscript{th} annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'15)},
  title     = {Automatic induction proofs of data-structures in imperative programs},
  year      = {2015},
  pages     = {457--466},
  publisher = {ACM},
  acmid     = {2737984},
  isbn      = {978-1-4503-3468-6},
  keywords  = {Data-structures, Induction Proofs, Separation},
  numpages  = {10},
}

@TechReport{CLR20,
  author       = {Xiaohong Chen and Dorel Lucanu and Grigore Ro\c{s}u},
  institution  = {University of Illinois at Urbana-Champaign},
  title        = {Initial algebra semantics in matching logic},
  year         = {2020},
  month        = jul,
  number       = {http://hdl.handle.net/2142/107781},
  abstract     = {Matching logic is a unifying foundational logic for defining formal programming language semantics, which adopts a minimalist design with few primitive constructs that are enough to express all properties within a variety of logical systems, including FOL, separation logic, (dependent) type systems, modal mu-logic, and more. In this paper, we consider initial algebra semantics and show how to capture it by matching logic specifications. Formally, given an algebraic specification E that defines a set of sorts (of data) and a set of operations whose behaviors are defined by a set of equational axioms, we define a corresponding matching logic specification, denoted INITIALALGEBRA(E), whose models are exactly the initial algebras of E. Thus, we reduce initial E-algebra semantics to the matching logic specifications INITIALALGEBRA(E), and reduce extrinsic initial E-algebra reasoning, which includes inductive reasoning, to generic, intrinsic matching logic reasoning.},
  author_id    = {Xiaohong Chen and Dorel Lucanu and Grigore Rosu},
  category     = {fsl,matching_logic,program_verification},
  hidden       = {false},
  project_name = {Matching Logic},
  project_url  = {http://www.matching-logic.org},
}

@Article{CMMS94,
  author   = {Luca Cardelli and Simone Martini and John C. Mitchell and Andre Scedrov},
  journal  = {Information and Computation},
  title    = {An extension of system {F} with subtyping},
  year     = {1994},
  issn     = {0890-5401},
  number   = {1},
  pages    = {4--56},
  volume   = {109},
  abstract = {System F is a well-known typed $\lambda$-calculus with polymorphic types, which provides a basis for polymorphic programming languages. We study an extension of F, called F: (pronounced ef-sub), that combines parametric polymorphism with subtyping. The main focus of the paper is the equational theory of F:, which is related to PER models and the notion of parametricity. We study some categorical properties of the theory when restricted to closed terms, including interesting categorical isomorphisms. We also investigate proof-theoretical properties, such as the conservativity of typing judgments with respect to F. We demonstrate by a set of examples how a range of constructs may be encoded in F:. These include record operations and subtyping hierarchies that are related to features of object-oriented languages.},
  doi      = {10.1006/inco.1994.1013},
}

@Article{CNV12,
  author   = {Cheney, James and Norrish, Michael and Vestergaard, Ren{\'e}},
  journal  = {Journal of Automated Reasoning},
  title    = {Formalizing adequacy: a case study for higher-order abstract syntax},
  year     = {2012},
  number   = {2},
  pages    = {209--239},
  volume   = {49},
  abstract = {Adequacy is an important criterion for judging whether a formalization is suitable for reasoning about the actual object of study. The issue is particularly subtle in the expansive case of approaches to languages with name-binding. In prior work, adequacy has been formalized only with respect to specific representation techniques. In this article, we give a general formal definition based on model-theoretic isomorphisms or interpretations. We investigate and formalize an adequate interpretation of untyped lambda-calculus within a higher-order metalanguage in Isabelle/HOL using the Nominal Datatype Package. Formalization elucidates some subtle issues that have been neglected in informal arguments concerning adequacy.},
  day      = {01},
  doi      = {10.1007/s10817-011-9221-6},
}

@Article{Coh89,
  author   = {Cohn, Anthony},
  journal  = {Artificial Intelligence Review},
  title    = {Taxonomic reasoning with many-sorted logics},
  year     = {1989},
  number   = {2},
  pages    = {89--128},
  volume   = {3},
  abstract = {This paper provides an introduction to many-sorted logics and motivates their use for representation and reasoning. Perhaps the most important reason to be interested in many-sorted logic is that computational efficiency can be achieved because the search space can be smaller and the length of a derivation shorter than in unsorted logic. There are many possible many-sorted logics of varying degrees of expressiveness, and the dimensions in which many-sorted logics differ are outlined and logics at various points in this space described. The relationship of many-sorted logic to unsorted logic is discussed and the reason why many-sorted logics derivations may be shorter is demonstrated. The paper concludes with a discussion of some many-sorted logic programming languages and some implementation issues.},
}

@InCollection{Com01,
  author    = {Hubert Comon},
  booktitle = {Handbook of automated reasoning},
  publisher = {North Holland},
  title     = {Inductionless induction},
  year      = {2001},
  address   = {Amsterdam},
  chapter   = {14},
  editor    = {Alan Robinson and Andrei Voronkov},
  pages     = {913--962},
  doi       = {10.1016/B978-044450813-3/50016-3},
}

@Article{Coo66,
  author   = {Cooper, D. C.},
  journal  = {The Computer Journal},
  title    = {The equivalence of certain computations},
  year     = {1966},
  issn     = {0010-4620},
  month    = may,
  number   = {1},
  pages    = {45--52},
  volume   = {9},
  abstract = {Both iterative and recursive programs for computing generalizations of functions which obtain the factorial of an integer, which reverse the order of symbols on a list and which obtain the approximate integral of a function are given as recursive definitions using conditional expressions. The equivalence of the iterative and recursive definitions are proved and a general theorem on equivalence, from which some of the results may be deduced, is stated and proved.},
  doi      = {10.1093/comjnl/9.1.45},
}

@Manual{coq,
  title        = {The {C}oq proof assistant},
  author       = {\mbox{Coq Team}},
  organization = {LogiCal Project},
  year         = {2020},
  url          = {http://coq.inria.fr},
}

@Misc{coq-cic,
  author       = {{Coq Team}},
  howpublished = {Online at \url{https://coq.inria.fr/refman/language/cic.html}.},
  title        = {{C}oq documents: calculus of inductive constructions},
  year         = {2020},
}

@InProceedings{CP90,
  author    = {Coquand, Thierry and Paulin, Christine},
  booktitle = {Proceedings of International Conference on Computer Logic},
  title     = {Inductively defined types},
  year      = {1990},
  address   = {Tallinn, USSR},
  pages     = {50--66},
  publisher = {Springer Berlin Heidelberg},
  doi       = {10.1007/3-540-52335-9_47},
  isbn      = {978-3-540-46963-6},
}

@InProceedings{CR18,
  author    = {Chen, Xiaohong and Ro{\c{s}}u, Grigore},
  booktitle = {Proceedings of the 8\textsuperscript{th} International Symposium on Leveraging Applications of Formal Methods (ISoLA'18)},
  title     = {A language-independent program verification framework},
  year      = {2018},
  pages     = {92--102},
  publisher = {Springer},
  volume    = {11245},
  abstract  = {This invited paper describes an approach to language-independent deductive verification using the {\$}{\$}{\backslash}mathbb {\{}K{\}}{\$}{\$}semantics framework, in which an operational semantics of a language is defined and a program verifier together with other language tools are generated automatically, correct-by-construction.},
  isbn      = {978-3-030-03421-4},
}

@InProceedings{CR19,
  author    = {Xiaohong Chen and Grigore Ro\c{s}u},
  booktitle = {Proceedings of the 34\textsuperscript{th} Annual ACM/IEEE Symposium on Logic in Computer Science (LICS'19)},
  title     = {Matching $\mu$-logic},
  year      = {2019},
  address   = {Vancouver, Canada},
  pages     = {1--13},
  publisher = {IEEE},
  abstract  = {Matching logic is a logic for specifying and reasoning about
structure by means of patterns and pattern matching.
This paper makes two contributions.
First, it proposes a sound and complete proof system for
matching logic in its full generality.
Previously, sound and complete deduction for matching logic
was known only for particular theories providing equality
and membership.
Second, it proposes matching mu-logic, an extension of
matching logic with a least fixpoint mu-binder.
It is shown that matching mu-logic captures as special instances many
important logics in mathematics and computer science, including
first-order logic with least fixpoints, modal mu-logic
as well as dynamic logic and various temporal logics such as
infinite/finite-trace linear temporal logic and computation tree logic,
and notably reachability logic, the underlying logic of the K framework
for programming language semantics and formal analysis.
Matching mu-logic therefore serves as a unifying foundation for
specifying and reasoning about fixpoints and induction, 
programming languages and program specification and verification.},
  doi       = {10.1109/LICS.2019.8785675},
}

@TechReport{CR19a,
  author      = {Chen, Xiaohong and Ro\c{s}u, Grigore},
  institution = {University of Illinois at Urbana-Champaign},
  title       = {Matching $\mu$-logic},
  year        = {2019},
  url         = {http://hdl.handle.net/2142/102281},
}

@TechReport{CR19b,
  author      = {Chen, Xiaohong and Ro\c{s}u, Grigore},
  institution = {University of Illinois at Urbana-Champaign},
  title       = {Applicative matching logic},
  year        = {2019},
  number      = {http://hdl.handle.net/2142/104616},
}

@InProceedings{CR20,
  author      = {Chen, Xiaohong and Ro\c{s}u, Grigore},
  booktitle   = {Proceedings of the 25\textsuperscript{th} ACM SIGPLAN International Conference on Functional Programming (ICFP'20)},
  title       = {A general approach to define binders using matching logic},
  year        = {2020},
  address     = {New Jersey, USA},
  pages       = {1--32},
  publisher   = {ACM},
  institution = {University of Illinois at Urbana-Champaign},
  url         = {http://hdl.handle.net/2142/106608},
}

@TechReport{CR20a,
  author      = {Xiaohong Chen and Grigore Ro\c{s}u},
  institution = {University of Illinois at Urbana-Champaign},
  title       = {A general approach to define binders using matching logic},
  year        = {2020},
  url         = {http://hdl.handle.net/2142/106608},
}

@Article{CS10,
  author    = {Michael R. Clarkson and Fred B. Schneider},
  journal   = {J. Comput. Secur.},
  title     = {Hyperproperties},
  year      = {2010},
  number    = {6},
  pages     = {1157--1210},
  volume    = {18},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/jcs/ClarksonS10.bib},
  doi       = {10.3233/JCS-2009-0393},
  timestamp = {Mon, 11 May 2020 22:58:57 +0200},
}

@InProceedings{CTR20,
  author            = {Xiaohong Chen and Minh-Thai Trinh and Nishant Rodrigues and Lucas Pe{\~{n}}a and Grigore Ro\c{s}u},
  booktitle         = {PACMPL Issue OOPSLA 2020},
  title             = {Towards a unified proof framework for automated fixpoint reasoning using matching logic},
  year              = {2020},
  month             = nov,
  pages             = {1--29},
  publisher         = {ACM/IEEE},
  abstract          = {Automation of fixpoint reasoning has been extensively studied for various mathematical structures, logical formalisms, and computational domains, resulting in specialized fixpoint provers for heaps, for streams, for term algebras, for temporal properties, for program correctness, and for many other formal systems and inductive and coinductive properties. However, in spite of great theoretical and practical interest, there is no unified framework for automated fixpoint reasoning. Although several attempts have been made, there is no evidence that such a unified framework is possible, or practical. In this paper, we propose a candidate based on matching logic, a formalism recently shown to theoretically unify the above mentioned formal systems. Unfortunately, the (Knaster-Tarski) proof rule of matching logic, which enables inductive reasoning, is not syntax-driven. Worse, it can be applied at any step during a proof, making automation seem hopeless. Inspired by recent advances in automation of inductive proofs in separation logic, we propose an alternative proof system for matching logic, which is amenable for automation. We then discuss our implementation of it, which although not superior to specialized state-of-the-art automated provers for specific domains, we believe brings some evidence and hope that a unified framework for automated reasoning is not out of reach.},
  author_id         = {Xiaohong Chen and Minh-Thai Trinh and Nishant Rodrigues and Lucas Pena and Grigore Rosu},
  booktitle_acronym = {OOPSLA'20},
  booktitle_url     = {https://2020.splashcon.org/track/splash-2020-oopsla},
  category          = {fsl,matching_logic},
  numpages          = {29},
  project_name      = {Matching Logic},
  project_url       = {https://github.com/runtimeverification},
}

@Article{Cur30,
  author  = {Curry, Haskell},
  journal = {American Journal of Mathematics},
  title   = {Grundlagen der kombinatorischen logik},
  year    = {1930},
  number  = {3},
  pages   = {509--536},
  volume  = {52},
}

@Book{Cur58,
  author    = {Curry, Haskell B.},
  publisher = {Amsterdam: North-Holland Pub. Co.},
  title     = {Combinatory logic},
  year      = {1958},
}

@Book{D08,
  author    = {Diaconescu, Razvan},
  publisher = {Birkh\"{a}user Basel},
  title     = {Institution-independent model theory},
  year      = {2008},
  address   = {Boston, Berlin},
  isbn      = {3764387076},
}

@Article{dBru72,
  author   = {Nicolaas Govert de Bruijn},
  journal  = {Indagationes Mathematicae},
  title    = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the {C}hurch-{R}osser theorem},
  year     = {1972},
  issn     = {1385-7258},
  number   = {5},
  pages    = {381--392},
  volume   = {75},
  abstract = {In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the {\textquotedblleft}distance{\textquotedblright} to the binding $\lambda$ instead of a name attached to that $\lambda$. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.},
  doi      = {https://doi.org/10.1016/1385-7258(72)90034-0},
  url      = {http://www.sciencedirect.com/science/article/pii/1385725872900340},
}

@Article{DF02,
  author   = {R{\u{a}}zvan Diaconescu and Kokichi Futatsugi},
  journal  = {Theoretical Computer Science},
  title    = {Logical foundations of {CafeOBJ}},
  year     = {2002},
  issn     = {0304-3975},
  note     = {Rewriting Logic and its Applications},
  number   = {2},
  pages    = {289--318},
  volume   = {285},
  abstract = {This paper surveys the logical and mathematical foundations of CafeOBJ, which is a successor of the famous algebraic specification language OBJ but adds to it several new primitive paradigms such as behavioural concurrent specification and rewriting logic. We first give a concise overview of CafeOBJ. Then we focus on the actual logical foundations of the language at two different levels: basic specification and structured specification, including also the definition of the CafeOBJ institution. We survey some novel or more classical theoretical concepts supporting the logical foundations of CafeOBJ, pointing out the main results but without giving proofs and without discussing all mathematical details. Novel theoretical concepts include the coherent hidden algebra formalism and its combination with rewriting logic, and Grothendieck (or fibred) institutions. However, for proofs and for some of the mathematical details not discussed here we give pointers to relevant publications. The logical foundations of CafeOBJ are structured by the concept of institution. Moreover, the design of CafeOBJ emerged from its logical foundations, and institution concepts played a crucial r{\^{o}}le in structuring the language design.},
  doi      = {https://doi.org/10.1016/S0304-3975(01)00361-9},
  keywords = {Algebraic specification, , Institutions, Behavioural specification},
  url      = {http://www.sciencedirect.com/science/article/pii/S0304397501003619},
}

@Book{DF98,
  author    = {Razvan Diaconescu and Kokichi Futatsugi},
  publisher = {World Scientific},
  title     = {{CafeOBJ} report: the language, proof techniques, and methodologies for object-oriented algebraic specification},
  year      = {1998},
  address   = {Singapore},
  series    = {AMAST Series in Computing},
  volume    = {6},
  doi       = {10.1142/3831},
}

@InProceedings{DFH95,
  author    = {Despeyroux, Jo{\"e}lle and Felty, Amy and Hirschowitz, Andr{\'e}},
  booktitle = {Typed Lambda Calculi and Applications},
  title     = {Higher-order abstract syntax in {Coq}},
  year      = {1995},
  address   = {Berlin, Heidelberg},
  pages     = {124--138},
  publisher = {Springer},
  abstract  = {The terms of the simply-typed $\lambda$-calculus can be used to express the higher-order abstract syntax of objects such as logical formulas, proofs, and programs. Support for the manipulation of such objects is provided in several programming languages (e.g. $\lambda$Prolog, Elf). Such languages also provide embedded implication, a tool which is widely used for expressing hypothetical judgments in natural deduction. In this paper, we show how a restricted form of second-order syntax and embedded implication can be used together with induction in the Coq Proof Development system. We specify typing rules and evaluation for a simple functional language containing only function abstraction and application, and we fully formalize a proof of type soundness in the system. One difficulty we encountered is that expressing the higher-order syntax of an object-language as an inductive type in Coq generates a class of terms that contains more than just those that directly represent objects in the language. We overcome this difficulty by defining a predicate in Coq that holds only for those terms that correspond to programs. We use this predicate to express and prove the adequacy for our syntax.},
  doi       = {10.1007/BFb0014049},
  isbn      = {978-3-540-49178-1},
}

@InProceedings{DGH+16,
  author    = {Daian, Philip and Guth, Dwight and Hathhorn, Chris and Li, Yilong and Pek, Edgar and Saxena, Manasvi and \c{S}erb\u{a}nu\c{t}\u{a}, Traian Florin and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 16\textsuperscript{th} International Conference on Runtime Verification ({RV}'16)},
  title     = {Runtime verification at work: {A} tutorial},
  year      = {2016},
  pages     = {46--67},
  publisher = {Springer},
  volume    = {10012},
}

@InProceedings{DMB08,
  author    = {De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  booktitle = {Proceedings of the 14\textsuperscript{th} International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS'08)},
  title     = {{Z3}: {A}n efficient {SMT} solver},
  year      = {2008},
  pages     = {337--340},
  publisher = {Springer},
}

@InProceedings{dMKA+15,
  author    = {de Moura, Leonardo and Kong, Soonho and Avigad, Jeremy and van Doorn, Floris and von Raumer, Jakob},
  booktitle = {Proceedings of the 25\textsuperscript{th} International Conference on Automated Deduction Automated Deduction (CADE'15)},
  title     = {The {L}ean theorem prover (system description)},
  year      = {2015},
  address   = {Cham},
  editor    = {Felty, Amy P. and Middeldorp, Aart},
  pages     = {378--388},
  publisher = {Springer International Publishing},
  abstract  = {Lean is a new open source theorem prover being developed at Microsoft Research and Carnegie Mellon University, with a small trusted kernel based on dependent type theory. It aims to bridge the gap between interactive and automated theorem proving, by situating automated tools and methods in a framework that supports user interaction and the construction of fully specified axiomatic proofs. Lean is an ongoing and long-term effort, but it already provides many useful components, integrated development environments, and a rich API which can be used to embed it into other systems. It is currently being used to formalize category theory, homotopy type theory, and abstract algebra. We describe the project goals, system architecture, and main features, and we discuss applications and continuing work.},
  isbn      = {978-3-319-21401-6},
}

@InProceedings{DPK+19,
  author    = {Sandeep Dasgupta and Daejun Park and Theodoros Kasampalis and Vikram S. Adve and Grigore Ro\c{s}u},
  booktitle = {Proceedings of the 40\textsuperscript{th} ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'19)},
  title     = {A complete formal semantics of {x86-64} user-level instruction set architecture},
  year      = {2019},
  address   = {Phoenix, Arizona, USA},
  pages     = {1133--1148},
  publisher = {ACM},
}

@Article{Dyb00,
  author    = {Peter Dybjer},
  journal   = {J. Symb. Log.},
  title     = {A general formulation of simultaneous inductive-recursive definitions in type theory},
  year      = {2000},
  number    = {2},
  pages     = {525--549},
  volume    = {65},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/jsyml/Dybjer00.bib},
  doi       = {10.2307/2586554},
  timestamp = {Sun, 02 Jun 2019 21:05:47 +0200},
  url       = {https://doi.org/10.2307/2586554},
}

@Article{Dybjer97,
  author   = {Peter Dybjer},
  journal  = {Theoretical Computer Science},
  title    = {Representing inductively defined sets by wellorderings in {M}artin-{L}{\"{o}}f's type theory},
  year     = {1997},
  issn     = {0304-3975},
  number   = {1},
  pages    = {329--335},
  volume   = {176},
  abstract = {We prove that every strictly positive endofunctor on the category of sets generated by Martin-L{\"{o}}f's extensional type theory has an initial algebra. This representation of inductively defined sets uses essentially the wellorderings introduced by Martin-L{\"{o}}f in {\textquotedblleft}Constructive Mathematics and Computer Programming{\textquotedblright}.},
  doi      = {https://doi.org/10.1016/S0304-3975(96)00145-4},
  url      = {http://www.sciencedirect.com/science/article/pii/S0304397596001454},
}

@Article{E97,
  author  = {{\'{E}}sik, Zolt{\'{a}}n},
  journal = {Theoretical Computer Science},
  title   = {Completeness of {P}ark induction},
  year    = {1997},
  number  = {1},
  pages   = {217--283},
  volume  = {177},
}

@Article{EKT+84,
  author    = {Hartmut Ehrig and Hans{-}J{\"{o}}rg Kreowski and James W. Thatcher and Eric G. Wagner and Jesse B. Wright},
  journal   = {Theor. Comput. Sci.},
  title     = {Parameter passing in algebraic specification languages},
  year      = {1984},
  pages     = {45--81},
  volume    = {28},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/EhrigKTWW84.bib},
  doi       = {10.1016/0304-3975(83)90065-8},
  timestamp = {Sun, 28 May 2017 13:20:08 +0200},
  url       = {https://doi.org/10.1016/0304-3975(83)90065-8},
}

@Book{EM85,
  author    = {Ehrig, Hartmut and Mahr, Bernd},
  publisher = {Springer},
  title     = {Fundamentals of algebraic specification 1: equations and initial semantics},
  year      = {1985},
  address   = {Berlin Heidelberg, Germany},
  series    = {Monographs in Theoretical Computer Science. An EATCS Series},
  volume    = {6},
  doi       = {10.1007/978-3-642-69962-7},
}

@InCollection{Eme90,
  author    = {Emerson, E. Allen},
  booktitle = {Formal Models and Semantics},
  publisher = {Elsevier},
  title     = {Temporal and modal logic},
  year      = {1990},
  pages     = {995--1072},
}

@Book{End72,
  author    = {Herbert B. Enderton},
  publisher = {Academic Press},
  title     = {A mathematical introduction to logic},
  year      = {1972},
  address   = {Califonia, USA},
  isbn      = {978-0-12-238450-9},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/books/daglib/0076838.bib},
  timestamp = {Fri, 29 Apr 2011 18:24:06 +0200},
}

@Article{Eng81,
  author  = {Engeler, Erwin},
  journal = {Algebra Universalis},
  title   = {Algebras and combinators},
  year    = {1981},
  issn    = {1420-8911},
  number  = {1},
  pages   = {389--392},
  volume  = {13},
  doi     = {10.1007/BF02483849},
  url     = {https://doi.org/10.1007/BF02483849},
}

@Article{Fef95,
  author  = {Feferman, Solomon},
  journal = {Erkenntnis},
  title   = {Definedness},
  year    = {1995},
  issn    = {1572-8420},
  number  = {3},
  pages   = {295--320},
  volume  = {43},
  doi     = {10.1007/BF01135376},
}

@Book{FFF09,
  author    = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew},
  publisher = {Mit Press},
  title     = {Semantics engineering with {PLT} {R}edex},
  year      = {2009},
}

@Article{FH09,
  author    = {Marcelo P. Fiore and Chung{-}Kil Hur},
  journal   = {Theor. Comput. Sci.},
  title     = {On the construction of free algebras for equational systems},
  year      = {2009},
  number    = {18},
  pages     = {1704--1729},
  volume    = {410},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/FioreH09.bib},
  doi       = {10.1016/j.tcs.2008.12.052},
  timestamp = {Sun, 28 May 2017 13:19:59 +0200},
  url       = {https://doi.org/10.1016/j.tcs.2008.12.052},
}

@InProceedings{FH10,
  author    = {Fiore, Marcelo and Hur, Chung-Kil},
  booktitle = {Computer Science Logic},
  title     = {Second-order equational logic (extended abstract)},
  year      = {2010},
  address   = {Berlin, Heidelberg},
  editor    = {Dawar, Anuj and Veith, Helmut},
  pages     = {320--335},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We extend universal algebra and its equational logic from first to second order as follows.},
  isbn      = {978-3-642-15205-4},
}

@Book{FJ06,
  publisher = {Springer},
  title     = {Algebra, meaning, and computation},
  year      = {2006},
  edition   = {First},
  series    = {Theoretical Computer Science and General Issues},
  volume    = {4060},
}

@Article{FL79,
  author    = {Fischer, Michael J. and Ladner, Richard E.},
  journal   = {Journal of Computer and System Sciences},
  title     = {Propositional dynamic logic of regular programs},
  year      = {1979},
  number    = {2},
  pages     = {194--211},
  volume    = {18},
  publisher = {Academic Press},
}

@InProceedings{FM07,
  author    = {Jean{-}Christophe Filli{\^{a}}tre and Claude March{\'{e}}},
  booktitle = {Proceedings of the 19\textsuperscript{th} International Conference on Computer Aided Verification (CAV'07)},
  title     = {The {W}hy/{K}rakatoa/{C}aduceus platform for deductive program verification},
  year      = {2007},
  pages     = {173--177},
  publisher = {Springer},
  volume    = {4590},
}

@InProceedings{FM10,
  author    = {Fiore, Marcelo and Mahmoud, Ola},
  booktitle = {Mathematical Foundations of Computer Science 2010},
  title     = {Second-order algebraic theories},
  year      = {2010},
  address   = {Berlin, Heidelberg},
  editor    = {Hlin{\v{e}}n{\'y}, Petr and Ku{\v{c}}era, Anton{\'i}n},
  pages     = {368--380},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Fiore and Hur [10] recently introduced a conservative extension of universal algebra and equational logic from first to second order. Second-order universal algebra and second-order equational logic respectively provide a model theory and a formal deductive system for languages with variable binding and parameterised metavariables. This work completes the foundations of the subject from the viewpoint of categorical algebra. Specifically, the paper introduces the notion of second-order algebraic theory and develops its basic theory. Two categorical equivalences are established: at the syntactic level, that of second-order equational presentations and second-order algebraic theories; at the semantic level, that of second-order algebras and second-order functorial models. Our development includes a mathematical definition of syntactic translation between second-order equational presentations. This gives the first formalisation of notions such as encodings and transforms in the context of languages with variable binding.},
  isbn      = {978-3-642-15155-2},
}

@Article{FM12,
  author   = {Felty, Amy and Momigliano, Alberto},
  journal  = {Journal of Automated Reasoning},
  title    = {Hybrid, a definitional two-level approach to reasoning with higher-order abstract syntax},
  year     = {2012},
  issn     = {1573-0670},
  number   = {1},
  pages    = {43--105},
  volume   = {48},
  abstract = {Combining higher-order abstract syntax and (co)-induction in a logical framework is well known to be problematic. We describe the theory and the practice of a tool called Hybrid, within Isabelle/HOL and Coq, which aims to address many of these difficulties. It allows object logics to be represented using higher-order abstract syntax, and reasoned about using tactical theorem proving and principles of (co)induction. Moreover, it is definitional, which guarantees consistency within a classical type theory. The idea is to have a de Bruijn representation of l-terms providing a definitional layer that allows the user to represent object languages using higher-order abstract syntax, while offering tools for reasoning about them at the higher level. In this paper we describe how to use Hybrid in a multi-level reasoning fashion, similar in spirit to other systems such as Twelf and Abella. By explicitly referencing provability in a middle layer called a specification logic, we solve the problem of reasoning by (co)induction in the presence of non-stratifiable hypothetical judgments, which allow very elegant and succinct specifications of object logic inference rules. We first demonstrate the method on a simple example, formally proving type soundness (subject reduction) for a fragment of a pure functional language, using a minimal intuitionistic logic as the specification logic. We then prove an analogous result for a continuation-machine presentation of the operational semantics of the same language, encoded this time in an ordered linear logic that serves as the specification layer. This example demonstrates the ease with which we can incorporate new specification logics, and also illustrates a significantly more complex object logic whose encoding is elegantly expressed using features of the new specification logic.},
  doi      = {10.1007/s10817-010-9194-x},
}

@InProceedings{FPS20,
  author    = {Marcelo P. Fiore and Andrew M. Pitts and S. C. Steenkamp},
  booktitle = {Proceedings of the 23\textsuperscript{rd} International Conference on Foundations of Software Science and Computation Structures (FOSSACS'20) Held as Part of the European Joint Conferences on Theory and Practice of Software (ETAPS'20)},
  title     = {Constructing infinitary quotient-inductive types},
  year      = {2020},
  address   = {Dublin, Ireland},
  editor    = {Jean Goubault{-}Larrecq and Barbara K{\"{o}}nig},
  pages     = {257--276},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {12077},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/fossacs/FiorePS20.bib},
  doi       = {10.1007/978-3-030-45231-5\_14},
  timestamp = {Mon, 04 May 2020 13:23:16 +0200},
  url       = {https://doi.org/10.1007/978-3-030-45231-5\_14},
}

@InProceedings{FPT99,
  author    = {M. {Fiore} and G. {Plotkin} and D. {Turi}},
  booktitle = {Proceedings. 14\textsuperscript{th} Symposium on Logic in Computer Science (Cat. No. PR00158)},
  title     = {Abstract syntax and variable binding},
  year      = {1999},
  address   = {Trento, Italy},
  pages     = {193--202},
  publisher = {IEEE},
}

@PhdThesis{Gab00,
  author = {Murdoch J. Gabbay},
  school = {DPMMS and Trinity College, Cambridge University},
  title  = {A theory of inductive definitions with $\alpha$-equivalence: semantics, implementation, programming language.},
  year   = {2000},
}

@Article{GB92,
  author     = {Goguen, Joseph A. and Burstall, Rod M.},
  journal    = {Journal of the ACM},
  title      = {Institutions: {A}bstract model theory for specification and programming},
  year       = {1992},
  number     = {1},
  pages      = {95--146},
  volume     = {39},
  abstract   = {There is a population explosion among the logical systems used in computing science. Examples include first-order logic, equational logic, Horn-clause logic, higher-order logic, infinitary logic, dynamic logic, intuitionistic logic, order-sorted logic, and temporal logic; moreover, there is a tendency for each theorem prover to have its own idiosyncratic logical system. The concept of institution is introduced to formalize the informal notion of {\textquotedblleft}logical system.{\textquotedblright} The major requirement is that there is a satisfaction relation between models and sentences that is consistent under change of notation. Institutions enable abstracting away from syntactic and semantic detail when working on language structure {\textquotedblleft}in-the-large{\textquotedblright}; for example, we can define language features for building large logical system. This applies to both specification languages and programming languages. Institutions also have applications to such areas as database theory and the semantics of artificial and natural languages. A first main result of this paper says that any institution such that signatures (which define notation) can be glued together, also allows gluing together theories (which are just collections of sentences over a fixed signature). A second main result considers when theory structuring is preserved by institution morphisms. A third main result gives conditions under which it is sound to use a theorem prover for one institution on theories from another. A fourth main result shows how to extend institutions so that their theories may include, in addition to the original sentences, various kinds of constraint that are useful for defining abstract data types, including both {\textquotedblleft}data{\textquotedblright} and {\textquotedblleft}hierarchy{\textquotedblright} constraints. Further results show how to define institutions that allow sentences and constraints from two or more institutions. All our general results apply to such {\textquotedblleft}duplex{\textquotedblright} and {\textquotedblleft}multiplex{\textquotedblright} institutions.},
  acmid      = {147524},
  issue_date = {Jan. 1992},
  numpages   = {52},
  publisher  = {ACM},
  url        = {http://doi.acm.org.proxy2.library.illinois.edu/10.1145/147508.147524},
}

@InProceedings{GC04,
  author    = {Gabbay, Murdoch and Cheney, James},
  booktitle = {Proceedings of the 19\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science (LICS'04)},
  title     = {A sequent calculus for nominal logic},
  year      = {2004},
  address   = {Washington, DC, USA},
  pages     = {139--148},
  publisher = {IEEE},
  doi       = {10.5555/1018438.1021850},
}

@Article{GD94,
  author    = {Goguen, Joseph and Diaconescu, R{\u{a}}zvan},
  journal   = {Mathematical Structures in Computer Science},
  title     = {An {O}xford survey of order sorted algebra},
  year      = {1994},
  number    = {3},
  pages     = {363--392},
  volume    = {4},
  doi       = {10.1017/S0960129500000517},
  publisher = {Cambridge University Press},
}

@Article{GDLE84,
  author   = {M. Gogolla and K. Drosten and U. Lipeck and H.-D. Ehrich},
  journal  = {Theoretical Computer Science},
  title    = {Algebraic and operational semantics of specifications allowing exceptions and errors},
  year     = {1984},
  issn     = {0304-3975},
  number   = {3},
  pages    = {289--313},
  volume   = {34},
  abstract = {The specification of abstract data types requires the possibility to treat exceptions and errors. We present an approach allowing all forms of error handling: error introduction, error propagation and error recovery. The algebraic semantics of our method and a new correctness criterion are given. We also introduce an operational semantics of a subclass of our specifications which coincides with the algebraic semantics.},
  doi      = {https://doi.org/10.1016/0304-3975(84)90056-2},
  keywords = {Specification of abstract data types, error and exception handling, algebraic semantics, correctness of specifications, operational semantics},
  url      = {http://www.sciencedirect.com/science/article/pii/0304397584900562},
}

@Article{GG16,
  author    = {Gabbay, {Murdoch J.} and Gabbay, {Michael J.}},
  journal   = {Annals of Pure and Applied Logic Volume},
  title     = {Representation and duality of the untyped $\lambda$-calculus in nominal lattice and topological semantics, with a proof of topological completeness},
  year      = {2017},
  issn      = {0168-0072},
  month     = oct,
  number    = {3},
  pages     = {501--621},
  volume    = {168},
  abstract  = {We give a semantics for the $\lambda$-calculus based on a topological duality theorem in nominal sets. A novel interpretation of $\lambda$ is given in terms of adjoints, and $\lambda$-terms are interpreted absolutely as sets (no valuation is necessary).},
  doi       = {10.1016/j.apal.2016.10.001},
  keywords  = {Nominal algebras, Fresh-finite limits, Lambda-calculus, Spectral spaces, Lattices and order, Variables, Nominal techniques, Mathematical foundations, Fraenkel--Mostowski set theory},
  publisher = {Elsevier},
}

@Book{GGJ+93,
  author = {Geuvers, Herman},
  title  = {Logics and type systems},
  year   = {1993},
}

@InProceedings{GGMR09,
  author    = {Garillot, Fran{\c{c}}ois and Gonthier, Georges and Mahboubi, Assia and Rideau, Laurence},
  booktitle = {Theorem Proving in Higher Order Logics},
  title     = {Packaging mathematical structures},
  year      = {2009},
  address   = {Berlin, Heidelberg},
  editor    = {Berghofer, Stefan and Nipkow, Tobias and Urban, Christian and Wenzel, Makarius},
  pages     = {327--342},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {This paper proposes generic design patterns to define and combine algebraic structures, using dependent records, coercions and type inference, inside the Coq system. This alternative to telescopes in particular supports multiple inheritance, maximal sharing of notations and theories, and automated structure inference. Our methodology is robust enough to handle a hierarchy comprising a broad variety of algebraic structures, from types with a choice operator to algebraically closed fields. Interfaces for the structures enjoy the convenience of a classical setting, without requiring any axiom. Finally, we present two applications of our proof techniques: a key lemma for characterising the discrete logarithm, and a matrix decomposition problem.},
  isbn      = {978-3-642-03359-9},
}

@Article{GGP18,
  author   = {Emmanuel Gunther and Alejandro Gadea and Miguel Pagano},
  journal  = {Electronic Notes in Theoretical Computer Science},
  title    = {Formalization of universal algebra in {A}gda},
  year     = {2018},
  issn     = {1571-0661},
  note     = {The 12\textsuperscript{th} Workshop on Logical and Semantic Frameworks, with Applications (LSFA 2017)},
  pages    = {147--166},
  volume   = {338},
  abstract = {In this work we present a novel formalization of universal algebra in Agda. We show that heterogeneous signatures can be elegantly modelled in type-theory using sets indexed by arities to represent operations. We prove elementary results of heterogeneous algebras, including the proof that the term algebra is initial and the proofs of the three isomorphism theorems. We further formalize equational theory and prove soundness and completeness. At the end, we define (derived) signature morphisms, from which we get the contravariant functor between algebras; moreover, we also proved that, under some restrictions, the translation of a theory induces a contra-variant functor between models.},
  doi      = {https://doi.org/10.1016/j.entcs.2018.10.010},
  keywords = {universal algebra, formalization of mathematics, equational logic},
  url      = {http://www.sciencedirect.com/science/article/pii/S1571066118300768},
}

@Article{GH78,
  author   = {Guttag, J. V. and Horning, J. J.},
  journal  = {Acta Informatica},
  title    = {The algebraic specification of abstract data types},
  year     = {1978},
  issn     = {1432-0525},
  month    = mar,
  number   = {1},
  pages    = {27--52},
  volume   = {10},
  abstract = {There have been many recent proposals for embedding abstract data types in programming languages. In order to reason about programs using abstract data types, it is desirable to specify their properties at an abstract level, independent of any particular implementation. This paper presents an algebraic technique for such specifications, develops some of the formal properties of the technique, and shows that these provide useful guidelines for the construction of adequate specifications.},
  day      = {01},
  doi      = {10.1007/BF00260922},
}

@InProceedings{GHSR16,
  author    = {Guth, Dwight and Hathhorn, Chris and Saxena, Manasvi and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 28\textsuperscript{th} International Conference on Computer Aided Verification ({CAV}'16)},
  title     = {{RV-Match}: {P}ractical semantics-based program analysis},
  year      = {2016},
  pages     = {447--453},
  publisher = {Springer},
  volume    = {9779},
}

@PhdThesis{Gir72,
  author  = {Jean-Yves Girard},
  school  = {Paris Diderot University},
  title   = {Interpr{\'e}tation fonctionnelle et {\'e}limination des coupures de l'arithm{\'e}tique d'ordre sup{\'e}rieur},
  year    = {1972},
  address = {Paris, France},
}

@Article{Gir86,
  author   = {Jean-Yves Girard},
  journal  = {Theoretical Computer Science},
  title    = {The system {F} of variable types, fifteen years later},
  year     = {1986},
  issn     = {0304-3975},
  pages    = {159--192},
  volume   = {45},
  abstract = {The semantic study of system F stumbles on the problem of variable types for which there was no convincing interpretation; we develop here a semantics based on the category-theoretic idea of direct limit, so that the behaviour of a variable type on any domain is determined by its behaviour on finite ones, thus getting rid of the circularity of variable types. To do so, one has first to simplify somehow the extant semantic ideas, replacing Scott domains by the simpler and more finitary qualitative domains. The interpretation obtained is extremely compact, as shown on simple examples. The paper also contains the definitions of a very small {\textquoteleft}universal model{\textquoteright} of lambda-calculus, and investigates the concept totality.},
  doi      = {https://doi.org/10.1016/0304-3975(86)90044-7},
  url      = {http://www.sciencedirect.com/science/article/pii/0304397586900447},
}

@Article{Gir87,
  author   = {Jean-Yves Girard},
  journal  = {Theoretical Computer Science},
  title    = {Linear logic},
  year     = {1987},
  issn     = {0304-3975},
  number   = {1},
  pages    = {1--101},
  volume   = {50},
  abstract = {The familiar connective of negation is broken into two operations: linear negation which is the purely negative part of negation and the modality {\textquotedblleft}of course{\textquotedblright} which has the meaning of a reaffirmation. Following this basic discovery, a completely new approach to the whole area between constructive logics and programmation is initiated.},
  doi      = {https://doi.org/10.1016/0304-3975(87)90045-4},
  url      = {http://www.sciencedirect.com/science/article/pii/0304397587900454},
}

@Misc{GitHubK5,
  howpublished = {\url{https://github.com/kframework/k}},
  title        = {{K} framework tools 5.0},
  year         = {2019},
  journal      = {GitHub repository},
  publisher    = {GitHub},
}

@InBook{GKWZ03,
  author    = {D. M. Gabbay and A. Kurucz and F. Wolter and M. Zakharyaschev},
  chapter   = {2},
  pages     = {41--109},
  publisher = {Elsevier},
  title     = {Applied modal logic},
  year      = {2003},
  series    = {Studies in Logic and the Foundations of Mathematics},
  volume    = {148},
  booktitle = {Many-Dimensional Modal Logics},
  issn      = {0049-237X},
}

@Article{GM82,
  author    = {Joseph A. Goguen and Jos{\'{e}} Meseguer},
  journal   = {{ACM} {SIGPLAN} Notices},
  title     = {Completeness of many-sorted equational logic},
  year      = {1982},
  number    = {1},
  pages     = {9--17},
  volume    = {17},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/sigplan/GoguenM82.bib},
  doi       = {10.1145/947886.947887},
  timestamp = {Tue, 26 May 2020 08:51:17 +0200},
  url       = {https://doi.org/10.1145/947886.947887},
}

@Article{GM85,
  author  = {Joseph A. Goguen and Jos{\'{e}} Meseguer},
  journal = {Houston Journal of Mathematics},
  title   = {Completeness of many-sorted equational logic},
  year    = {1985},
  number  = {3},
  pages   = {307--334},
  volume  = {11},
}

@Article{GM92,
  author  = {Goguen, Joseph and Meseguer, Jos{\'{e}}},
  journal = {Theoretical Computer Science},
  title   = {Order-sorted algebra, part {I}: equational deduction for multiple inheritance, overloading, exceptions and partial operations},
  year    = {1992},
  number  = {2},
  pages   = {217--273},
  volume  = {105},
  doi     = {10.1016/0304-3975(92)90302-V},
}

@Book{GM96,
  author    = {Goguen, Joseph A. and Malcolm, Grant},
  publisher = {MIT Press},
  title     = {Algebraic semantics of imperative programs},
  year      = {1996},
  address   = {Cambridge, MA, USA},
  isbn      = {026207172X},
}

@InProceedings{GM99,
  author    = {Groote, Jan Friso and Mateescu, Radu},
  booktitle = {Algebraic Methodology and Software Technology},
  title     = {Verification of temporal properties of processes in a setting with data},
  year      = {1999},
  address   = {Berlin, Heidelberg},
  editor    = {Haeberer, Armando M.},
  pages     = {74--90},
  publisher = {Springer},
  abstract  = {We define a value-based modal {\textmu}-calculus, built from firstorder formulas, modalities, and fixed point operators parameterized by data variables, which allows to express temporal properties involving data. We interpret this logic over {\textmu}Crl terms defined by linear process equations. The satisfaction of a temporal formula by a {\textmu}Crl term is translated to the satisfaction of a first-order formula containing parameterized fixed point operators. We provide proof rules for these fixed point operators and show their applicability on various examples.},
  doi       = {10.1007/3-540-49253-4_8},
  isbn      = {978-3-540-49253-5},
}

@Article{GMN12,
  author   = {Gacek, Andrew and Miller, Dale and Nadathur, Gopalan},
  journal  = {Journal of Automated Reasoning},
  title    = {A two-level logic approach to reasoning about computations},
  year     = {2012},
  issn     = {1573-0670},
  number   = {2},
  pages    = {241--273},
  volume   = {49},
  abstract = {Relational descriptions have been used in formalizing diverse computational notions, including, for example, operational semantics, typing, and acceptance by non-deterministic machines. We therefore propose a (restricted) logical theory over relations as a language for specifying such notions. Our specification logic is further characterized by an ability to explicitly treat binding in object languages. Once such a logic is fixed, a natural next question is how we might prove theorems about specifications written in it. We propose to use a second logic, called a reasoning logic, for this purpose. A satisfactory reasoning logic should be able to completely encode the specification logic. Associated with the specification logic are various notions of binding: for quantifiers within formulas, for eigenvariables within sequents, and for abstractions within terms. To provide a natural treatment of these aspects, the reasoning logic must encode binding structures as well as their associated notions of scope, free and bound variables, and capture-avoiding substitution. Further, to support arguments about provability, the reasoning logic should possess strong mechanisms for constructing proofs by induction and co-induction. We provide these capabilities here by using a logic called \$\{{\backslash}cal G\}\$which represents relations over l-terms via definitions of atomic judgments, contains inference rules for induction and co-induction, and includes a special generic quantifier. We show how provability in the specification logic can be transparently encoded in \$\{{\backslash}cal G\}\$. We also describe an interactive theorem prover called Abella that implements \$\{{\backslash}cal G\}\$and this two-level logic approach and we present several examples that demonstrate the efficacy of Abella in reasoning about computations.},
  doi      = {10.1007/s10817-011-9218-1},
  url      = {https://doi.org/10.1007/s10817-011-9218-1},
}

@Book{Goe92,
  author    = {G{\"o}del, Kurt},
  publisher = {Courier corporation},
  title     = {On formally undecidable propositions of principia {M}athematica and related systems},
  year      = {1992},
}

@InProceedings{Gog74,
  author    = {Joseph A. Goguen},
  booktitle = {Proceedings of the 1\textsuperscript{st} international Symposium on Category Theory Applied to Computation and Control},
  title     = {Semantics of computation},
  year      = {1974},
  pages     = {234--249},
}

@InCollection{Gog90,
  author    = {Goguen, Joseph A.},
  booktitle = {Research topics in functional programming},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  title     = {Higher-order functions considered unnecessary for higher-order programming},
  year      = {1990},
  isbn      = {0-201-17236-4},
  pages     = {309--351},
  acmid     = {119842},
  numpages  = {43},
  url       = {http://dl.acm.org/citation.cfm?id=119830.119842},
}

@InCollection{Gog91,
  author    = {Goguen, Joseph A.},
  booktitle = {Topology and Category Theory in Computer Science},
  publisher = {Oxford University Press, Inc.},
  title     = {Types as theories},
  year      = {1991},
  chapter   = {Types As Theories},
  isbn      = {0-19-853760-3},
  pages     = {357--385},
  acmid     = {135134},
  numpages  = {29},
  url       = {http://dl.acm.org/citation.cfm?id=130236.135134},
}

@Article{GoguenM00,
  author   = {Joseph Goguen and Grant Malcolm},
  journal  = {Theoretical Computer Science},
  title    = {A hidden agenda},
  year     = {2000},
  issn     = {0304-3975},
  number   = {1},
  pages    = {55--101},
  volume   = {245},
  abstract = {This paper publicly reveals, motivates, and surveys the results of an ambitious hidden agenda for applying algebra to software engineering. The paper reviews selected literature, introduces a new perspective on nondeterminism, and features powerful hidden coinduction techniques for proving behavioral properties of concurrent systems, especially refinements; some proofs are given using OBJ3. We also discuss where modularization, bisimulation, transition systems and combinations of the object, logic, constraint and functional paradigms fit into our hidden agenda.},
  doi      = {https://doi.org/10.1016/S0304-3975(99)00275-3},
  keywords = {Algebraic specification, Coinduction, Correctness proofs, Object orientation, Concurrency},
  url      = {http://www.sciencedirect.com/science/article/pii/S0304397599002753},
}

@Article{GoguenR02,
  author    = {Joseph A. Goguen and Grigore Rosu},
  journal   = {Formal Asp. Comput.},
  title     = {Institution morphisms},
  year      = {2002},
  number    = {3-5},
  pages     = {274--307},
  volume    = {13},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/fac/GoguenR02.bib},
  doi       = {10.1007/s001650200013},
  timestamp = {Mon, 15 Jun 2020 16:50:31 +0200},
  url       = {https://doi.org/10.1007/s001650200013},
}

@InProceedings{GP99,
  author    = {M. {Gabbay} and A. {Pitts}},
  booktitle = {Proceedings of the 14\textsuperscript{th} Symposium on Logic in Computer Science (LICS'19)},
  title     = {A new approach to abstract syntax involving binders},
  year      = {1999},
  address   = {Trento, Italy},
  month     = jul,
  pages     = {214--224},
  publisher = {IEEE},
  abstract  = {The Fraenkel-Mostowski permutation model of set theory with atoms (FM-sets) can serve as the semantic basis of meta-logics for specifying and reasoning about formal systems involving name binding, /spl alpha/-conversion, capture avoiding substitution, and so on. We show that in FM-set theory one can express statements quantifying over 'fresh' names and we use this to give a novel set-theoretic interpretation of name abstraction. Inductively defined FM-sets involving this name abstraction set former (together with cartesian product and disjoint union) can correctly encode object-level syntax module e-conversion. In this way, the standard theory of algebraic data types can be extended to encompass signatures involving binding operators. In particular, there is an associated notion of structural recursion for defining syntax-manipulating functions (such as capture avoiding substitution, set of free variables, etc.) and a notion of proof by structural induction, both of which remain pleasingly close to informal practice.},
  doi       = {10.1109/LICS.1999.782617},
}

@Article{GPWZ02,
  author     = {Geuvers, Herman and Pollack, Randy and Wiedijk, Freek and Zwanenburg, Jan},
  journal    = {J. Symb. Comput.},
  title      = {A constructive algebraic hierarchy in {C}oq},
  year       = {2002},
  issn       = {0747-7171},
  month      = oct,
  number     = {4},
  pages      = {271--286},
  volume     = {34},
  address    = {USA},
  doi        = {10.1006/jsco.2002.0552},
  issue_date = {October 2002},
  numpages   = {16},
  publisher  = {Academic Press, Inc.},
  url        = {https://doi.org/10.1006/jsco.2002.0552},
}

@InProceedings{GS85,
  author    = {Yuri Gurevich and Saharon Shelah},
  booktitle = {Proceedings of the 26\textsuperscript{th} Annual Symposium on Foundations of Computer Science (SFCS'85)},
  title     = {Fixed-point extensions of first-order logic},
  year      = {1985},
  pages     = {346--353},
  publisher = {IEEE},
}

@Article{GTWW77,
  author    = {Goguen, Joseph and Thatcher, James and Wagner, Eric and Wright, Jesse},
  journal   = {Journal of the {ACM}},
  title     = {Initial algebra semantics and continuous algebras},
  year      = {1977},
  number    = {1},
  pages     = {68--95},
  volume    = {24},
  publisher = {ACM},
}

@MastersThesis{Gut13,
  author = {Dwight Guth},
  school = {University of Illinois at Urbana-Champaign},
  title  = {A formal semantics of {P}ython 3.3},
  year   = {2013},
  month  = aug,
  url    = {http://hdl.handle.net/2142/45275},
}

@Article{GuttagHW85,
  author    = {John V. Guttag and James J. Horning and Jeannette M. Wing},
  journal   = {{IEEE} Softw.},
  title     = {The larch family of specification languages},
  year      = {1985},
  number    = {5},
  pages     = {24--36},
  volume    = {2},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/software/GuttagHW85.bib},
  doi       = {10.1109/MS.1985.231756},
  timestamp = {Mon, 08 Jun 2020 22:32:12 +0200},
  url       = {https://doi.org/10.1109/MS.1985.231756},
}

@InBook{GWM+00,
  author    = {Goguen, Joseph and Winkler, Timothy and Meseguer, Jos{\'e} and Futatsugi, Kokichi and Jouannaud, Jean-Pierre},
  chapter   = {Introducing {OBJ}},
  pages     = {3--167},
  publisher = {Springer},
  title     = {Software engineering with {OBJ}: {A}lgebraic specification in action},
  year      = {2000},
  address   = {Massachusetts, USA},
  booktitle = {Software Engineering with OBJ: Algebraic Specification in Action},
}

@Book{Ham78,
  author    = {Hamilton, Alan G.},
  publisher = {Cambridge University Press},
  title     = {Logic for mathematicians},
  year      = {1978},
  address   = {Cambridge, UK},
}

@InCollection{Har84,
  author    = {Harel, David},
  booktitle = {Handbook of Philosophical Logic},
  publisher = {Springer},
  title     = {Dynamic logic},
  year      = {1984},
  pages     = {497--604},
  volume    = {165},
}

@Article{Has53,
  author  = {Gisbert Hasenjaeger},
  journal = {The Journal of Symbolic Logic},
  title   = {Eine bemerkung zu {H}enkin's beweis f{\"{u}}r die vollst{\"{a}}ndigkeit des pr{\"{a}}dikatenkalk{\"{u}}ls der ersten stufe},
  year    = {1953},
  number  = {1},
  pages   = {42--48},
  volume  = {18},
  doi     = {10.2307/2266326},
}

@Book{HC68,
  author    = {George Edward Hughes and Max Cresswell},
  publisher = {Routledge},
  title     = {An introduction to modal logic},
  year      = {1968},
  address   = {England, UK},
}

@PhdThesis{Hen08,
  author = {Hendrix, Joseph D.},
  school = {University of Illinois at Urbana-Champaign},
  title  = {Decision procedures for equationally based reasoning},
  year   = {2008},
}

@InProceedings{HER15,
  author    = {Hathhorn, Chris and Ellison, Chucky and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 36\textsuperscript{th} annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'15)},
  title     = {Defining the undefinedness of {C}},
  year      = {2015},
  address   = {Portland, OR},
  pages     = {336--345},
  publisher = {ACM},
}

@Article{HHP93,
  author  = {Harper, Robert and Honsell, Furio and Plotkin, Gordon},
  journal = {Journal of the ACM},
  title   = {A framework for defining logics},
  year    = {1993},
  number  = {1},
  pages   = {143--184},
  volume  = {40},
  doi     = {10.1145/138027.138060},
}

@Article{HL07,
  author    = {Harper, Robert and Licata, Daniel R.},
  journal   = {Journal of Functional Programming},
  title     = {Mechanizing metatheory in a logical framework},
  year      = {2007},
  number    = {4-5},
  pages     = {613--673},
  volume    = {17},
  doi       = {10.1017/S0956796807006430},
  publisher = {Cambridge University Press},
}

@Article{HL80,
  author  = {Hindley, Roger and Longo, Giuseppe},
  journal = {Mathematical Logic Quarterly},
  title   = {Lambda-calculus models and extensionality},
  year    = {1980},
  number  = {4},
  pages   = {289--310},
  volume  = {26},
  doi     = {10.1002/malq.19800261902},
}

@InProceedings{HM07,
  author    = {Hendrix, Joe and Meseguer, Jos{\'e}},
  booktitle = {Term Rewriting and Applications},
  title     = {On the completeness of context-sensitive order-sorted specifications},
  year      = {2007},
  address   = {Berlin, Heidelberg},
  editor    = {Baader, Franz},
  pages     = {229--245},
  publisher = {Springer},
  abstract  = {We propose three different notions of completeness for order-sorted equational specifications supporting context-sensitive rewriting modulo axioms relative to a replacement map $\mu$. Our three notions are: (1) a definition of $\mu$-canonical completeness under which $\mu$-canonical forms coincide with canonical forms; (2) a definition of semantic completeness that guarantees that the $\mu$-operational semantics and standard initial algebra semantics are isomorphic; and (3) an appropriate definition of $\mu$-sufficient completeness with respect to a set of constructor symbols. Based on these notions, we use equational tree automata techniques to obtain decision procedures for checking these three kinds of completeness for equational specifications satisfying appropriate requirements such as weak normalization, ground confluence and sort-decreasingness, and left-linearity. The decision procedures are implemented as an extension of the Maude sufficient completeness checker.},
  doi       = {10.1007/978-3-540-73449-9_18},
  isbn      = {978-3-540-73449-9},
}

@InProceedings{HMO06,
  author    = {Hendrix, Joe and Meseguer, Jos{\'e} and Ohsaki, Hitoshi},
  booktitle = {Automated Reasoning},
  title     = {A sufficient completeness checker for linear order-sorted specifications modulo axioms},
  year      = {2006},
  address   = {Berlin, Heidelberg},
  editor    = {Furbach, Ulrich and Shankar, Natarajan},
  pages     = {151--155},
  publisher = {Springer},
  abstract  = {We present a tool for checking the sufficient completeness of left-linear, order-sorted equational specifications modulo associativity, commutativity, and identity. Our tool treats this problem as an equational tree automata decision problem using the tree automata library CETA, which we also introduce in this paper. CETA implements a semi-algorithm for checking the emptiness of a class of tree automata that are closed under Boolean operations and an equational theory containing associativity, commutativity and identity axioms. Though sufficient completeness for this class of specifications is undecidable in general, our tool is a decision procedure for subcases known to be decidable, and has specialized techniques that are effective in practice for the general case.},
  doi       = {10.1007/11814771_14},
  isbn      = {978-3-540-37188-5},
}

@Article{Hoa69,
  author  = {Hoare, C. A. R.},
  journal = {Communications of the {ACM}},
  title   = {An axiomatic basis for computer programming},
  year    = {1969},
  number  = {10},
  pages   = {576--580},
  volume  = {12},
}

@Book{Hof97,
  author    = {Hofmann, Martin},
  publisher = {Springer},
  title     = {Extensional constructs in intensional type theory},
  year      = {1997},
}

@InProceedings{HP72,
  author    = {Hitchcock, Peter and Park, David},
  booktitle = {Proceedings of the 1\textsuperscript{st} International Colloquium on Automata, Languages and Programming (ICALP'72)},
  title     = {Induction rules and termination roofs},
  year      = {1972},
  pages     = {225--251},
  publisher = {Springer},
}

@InProceedings{HSZ+18,
  author    = {Everett Hildenbrandt and Manasvi Saxena and Xiaoran Zhu and Nishant Rodrigues and Philip Daian and Dwight Guth and Brandon Moore and Yi Zhang and Daejun Park and Andrei \c{S}tef\u{a}nescu and Grigore Ro\c{s}u},
  booktitle = {Proceedings of the 2018 IEEE Computer Security Foundations Symposium (CSF'18)},
  title     = {{KEVM}: {A} complete semantics of the {E}thereum virtual machine},
  year      = {2018},
  address   = {Oxford, UK},
  note      = {\url{http://jellopaper.org}},
  pages     = {204--217},
  publisher = {IEEE},
}

@Book{HTK00,
  author    = {Harel, David and Tiuryn, Jerzy and Kozen, Dexter},
  publisher = {MIT Press},
  title     = {Dynamic logic},
  year      = {2000},
}

@Article{II65,
  author    = {Imai, Yasuyuki and Is{\'e}ki, Kiyoshi},
  journal   = {Proceedings of the Japan Academy},
  title     = {On axiom systems of propositional calculi},
  year      = {1965},
  number    = {6},
  pages     = {436--439},
  volume    = {41},
  publisher = {The Japan Academy},
}

@Article{iris,
  author    = {Jung, Ralf and Krebbers, Robbert and Jourdan, Jacques-henri and Bizjak, Ale{{\v{s}}} and Birkedal, Lars and Dreyer, Derek},
  journal   = {Journal of Functional Programming},
  title     = {Iris from the ground up: A modular foundation for higher-order concurrent separation logic},
  year      = {2018},
  pages     = {e20},
  volume    = {28},
  doi       = {10.1017/S0956796818000151},
  publisher = {Cambridge University Press},
}

@InProceedings{IRS13,
  author    = {Radu Iosif and Adam Rogalewicz and Jiri Simacek},
  booktitle = {Proceedings of the 24\textsuperscript{th} International Conference on Automated Deduction (CADE'13)},
  title     = {The tree width of separation logic with recursive definitions},
  year      = {2013},
  pages     = {21--38},
  publisher = {Springer},
  volume    = {7898},
}

@Misc{isabelle,
  author = {{The Isabelle development team}},
  note   = {\url{https://isabelle.in.tum.de/}},
  title  = {{I}sabelle},
  year   = {2018},
}

@InProceedings{JG07,
  author    = {Johann, Patricia and Ghani, Neil},
  booktitle = {Typed Lambda Calculi and Applications},
  title     = {Initial algebra semantics is enough!},
  year      = {2007},
  address   = {Berlin, Heidelberg},
  editor    = {Della Rocca, Simona Ronchi},
  pages     = {207--222},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {Initial algebra semantics is a cornerstone of the theory of modern functional programming languages. For each inductive data type, it provides a fold combinator encapsulating structured recursion over data of that type, a Church encoding, a build combinator which constructs data of that type, and a fold/build rule which optimises modular programs by eliminating intermediate data of that type. It has long been thought that initial algebra semantics is not expressive enough to provide a similar foundation for programming with nested types. Specifically, the folds have been considered too weak to capture commonly occurring patterns of recursion, and no Church encodings, build combinators, or fold/build rules have been given for nested types. This paper overturns this conventional wisdom by solving all of these problems.},
  isbn      = {978-3-540-73228-0},
}

@Article{JK89,
  author   = {Jean-Pierre Jouannaud and Emmanuel Kounalis},
  journal  = {Information and Computation},
  title    = {Automatic proofs by induction in theories without constructors},
  year     = {1989},
  issn     = {0890-5401},
  number   = {1},
  pages    = {1--33},
  volume   = {82},
  abstract = {Inductionless induction consists of using pure equational reasoning for proving the validity of an equation in the initial algebra of a set of equational axioms, which would normally require some kind of induction. Under given hypotheses, the equation is valid iff adding it to the set of axioms does not result in an inconsistency. This inconsistency can be found by the Knuth-Bendix completion algorithm, provided that the signature of the algebra is split into free constructors and defined symbols, which must be completely defined in terms of constructors. This is the base of the so-called inductive completion algorithm of Huet and Hullot. Two key concepts, inductive reducibility and inductive co-reducibility, allow us to extend these techniques in various directions: incomplete specifications, nonfree constructors, no constructors specified, equational term rewriting systems. The method is adapted for proving the consistency property of an enrichment of a specification by new operators and new equations. In addition, we get also a simple algorithm to exhibit a set of constructors of a specification. Finally, inductive co-reducibility is reduced to inductive reducibility and an algorithm for deciding inductive reducibility is given for left linear term rewriting systems.},
  doi      = {10.1016/0890-5401(89)90062-X},
}

@InProceedings{JSP10,
  author    = {Jacobs, Bart and Smans, Jan and Piessens, Frank},
  booktitle = {Proceedings of the 8\textsuperscript{th} Asian Symposium of Programming Languages and Systems (APLAS'10)},
  title     = {A quick tour of the {V}eri{F}ast program verifier},
  year      = {2010},
  pages     = {304--311},
  publisher = {Springer},
  volume    = {6461},
  abstract  = {This paper describes the main features of VeriFast, a sound and modular program verifier for C and Java. VeriFast takes as input a number of source files annotated with method contracts written in separation logic, inductive data type and fixpoint definitions, lemma functions and proof steps. The verifier checks that (1) the program does not perform illegal operations such as dividing by zero or illegal memory accesses and (2) that the assumptions described in method contracts hold in each execution.},
  isbn      = {978-3-642-17164-2},
}

@InProceedings{Kah87,
  author       = {Gilles Kahn},
  booktitle    = {Proceedings of the 4\textsuperscript{th} Annual Symposium on Theoretical Aspects of Computer Science (STACS'87)},
  title        = {Natural semantics},
  year         = {1987},
  address      = {Passau, Germany},
  pages        = {22--39},
  volume       = {247},
  bibsource    = {DBLP, http://dblp.uni-trier.de},
  xxxpublisher = {Springer},
}

@Article{Kap67,
  author  = {Kaplan, D. M.},
  journal = {Stanford Artificial Intelligence Memo No.~48},
  title   = {Correctness of a compiler for {A}lgol-like programs},
  year    = {1967},
  number  = {1},
  pages   = {1--35},
  volume  = {48},
}

@Article{Kes09,
  author  = {Delia Kesner},
  journal = {Logical Methods in Computer Science},
  title   = {A theory of explicit substitutions with safe and full composition},
  year    = {2009},
  number  = {3},
  pages   = {1--29},
  volume  = {5},
}

@Misc{KEV17,
  author       = {{KEVM Team}},
  howpublished = {\url{https://github.com/kframework/evm-semantics}},
  title        = {{KEVM}: semantics of {EVM} in {K}},
  year         = {2017},
}

@InProceedings{KGM+19,
  author    = {Kasampalis, Theodoros and Guth, Dwight and Moore, Brandon and \c{S}erb\u{a}nu\c{t}\u{a}, Traian Florin and Zhang, Yi and Filaretti, Daniele and \c{S}erb\u{a}nu\c{t}\u{a}, Virgil and Johnson, Ralph and Ro\c{s}u, Grigore},
  booktitle = {Proceeding of the 23\textsuperscript{rd} International Symposium on Formal Methods (FM'19)},
  title     = {{IELE}: {A} rigorously designed language and tool ecosystem for the blockchain},
  year      = {2019},
}

@Article{KKA19,
  author     = {Kaposi, Ambrus and Kov\'{a}cs, Andr\'{a}s and Altenkirch, Thorsten},
  journal    = {Proc. ACM Program. Lang.},
  title      = {Constructing quotient inductive-inductive types},
  year       = {2019},
  month      = jan,
  number     = {POPL},
  volume     = {3},
  address    = {New York, NY, USA},
  articleno  = {2},
  doi        = {10.1145/3290315},
  issue_date = {January 2019},
  keywords   = {quotient inductive types, logical relations, higher inductive types, inductive-inductive types, generalised algebraic theory, homotopy type theory, category with families},
  numpages   = {24},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3290315},
}

@Book{KL83,
  author    = {B. Kutzler and F. Lichtenberger},
  publisher = {Springer},
  title     = {Bibliography on abstract data types},
  year      = {1983},
  address   = {New York, USA},
  series    = {Informatik-Fachberichte},
  volume    = {68},
  doi       = {10.1007/978-3-642-69032-7},
}

@InCollection{Klo93,
  author    = {Klop, Jan Willem},
  booktitle = {Handbook of Logic in Computer Science},
  publisher = {Oxford University Press, Inc.},
  title     = {Term rewriting systems},
  year      = {1993},
  address   = {USA},
  chapter   = {1},
  isbn      = {0198537611},
  pages     = {1--116},
  volume    = {2, Background: computational structures},
  numpages  = {116},
}

@Article{KO08,
  author  = {Kashima, Ryo and Okamoto, Keishi},
  journal = {Journal of Logic and Computation},
  title   = {General models and completeness of first-order modal $\mu$-calculus},
  year    = {2008},
  number  = {4},
  pages   = {497--507},
  volume  = {18},
  doi     = {10.1093/logcom/exm077},
}

@Article{Koy82,
  author  = {Koymans, C. P. J.},
  journal = {Information and Control},
  title   = {Models of the lambda calculus},
  year    = {1982},
  pages   = {306--332},
  volume  = {52},
}

@Article{Koz83,
  author    = {Kozen, Dexter},
  journal   = {Theoretical Computer Science},
  title     = {Results on the propositional $\mu$-calculus},
  year      = {1983},
  number    = {3},
  pages     = {333--354},
  volume    = {27},
  abstract  = {We define a propositional version of the $\Mu$-calculus, and give an exponential-time decision procedure, small model property, and complete deductive system. We also show that it is strictly more expressive than PDL. Finally, we give an algebraic semantics and prove a representation theorem.},
  doi       = {10.1016/0304-3975(82)90125-6},
  isbn      = {978-3-540-39308-5},
  publisher = {North-Holland},
}

@PhdThesis{Kre02,
  author = {Kreutzer, Stephan},
  school = {Bibliothek der RWTH Aachen},
  title  = {Pure and applied fixed-point logics},
  year   = {2002},
}

@Book{Kri93,
  author    = {Jean Louis Krivine},
  publisher = {Ellis Horwood},
  title     = {Lambda-calculus, types and models},
  year      = {1993},
  address   = {USA},
  isbn      = {0130624071},
}

@InProceedings{KRV17,
  author    = {Kov\'{a}cs, Laura and Robillard, Simon and Voronkov, Andrei},
  booktitle = {Proceedings of the 44\textsuperscript{th} ACM SIGPLAN Symposium on Principles of Programming Languages (POPL'17)},
  title     = {Coming to terms with quantified reasoning},
  year      = {2017},
  address   = {Paris, France},
  pages     = {260--270},
  publisher = {ACM},
  acmid     = {3009887},
  isbn      = {978-1-4503-4660-3},
  location  = {Paris, France},
  numpages  = {11},
}

@Article{Lam80,
  author  = {Lamport, Leslie},
  journal = {Acta Informatica},
  title   = {The ``{H}oare logic'' of concurrent programs},
  year    = {1980},
  number  = {1},
  pages   = {21--37},
  volume  = {14},
}

@InProceedings{Lee08,
  author       = {Lee, Edward A.},
  booktitle    = {Proceedings of the 11\textsuperscript{th} IEEE Symposium on Object Oriented Real-Time Distributed Computing (ISORC'08)},
  title        = {Cyber physical systems: {D}esign challenges},
  year         = {2008},
  organization = {IEEE},
  pages        = {363--369},
}

@Article{Len05,
  author  = {Lenzi, Giacomo},
  journal = {Task quarterly},
  title   = {The modal $\mu$-calculus: {A} survey},
  year    = {2005},
  number  = {3},
  pages   = {293--316},
  volume  = {9},
  file    = {:The modal mu-calculus, A survey.pdf:PDF},
}

@InProceedings{LG18,
  author    = {Li, Liyi and Gunter, Elsa},
  booktitle = {Formal Aspects of Component Software},
  title     = {Isa{K}-static {A} complete static semantics of {K}},
  year      = {2018},
  pages     = {196--215},
  publisher = {Springer},
}

@InProceedings{LG89,
  author    = {Lucio-Carrasco, Francisca and Gavilanes-Franco, Antonio},
  booktitle = {Proceedings of the 6\textsuperscript{th} Annual Symposium on Theoretical Aspects of Computer Science (STACS'89)},
  title     = {A first order logic for partial functions},
  year      = {1989},
  address   = {Paderborn, Germany},
  pages     = {47--58},
  publisher = {Springer},
  doi       = {10.1007/BFb0028972},
}

@InProceedings{LM14,
  author    = {Leino, K. Rustan M. and Moskal, Micha{\l}},
  booktitle = {Proceedings of the 19\textsuperscript{th} International Symposium on Formal Methods (FM'14)},
  title     = {Co-induction simply},
  year      = {2014},
  number    = {8442},
  pages     = {382--398},
  publisher = {Springer},
  abstract  = {This paper shows that an SMT-based program verifier can support reasoning about co-induction---handling infinite data structures, lazy function calls, and user-defined properties defined as greatest fix-points, as well as letting users write co-inductive proofs. Moreover, the support can be packaged to provide a simple user experience. The paper describes the features for co-induction in the language and verifier Dafny, defines their translation into input for a first-order SMT solver, and reports on some encouraging initial experience.},
  isbn      = {978-3-319-06410-9},
}

@Article{LM18,
  author        = {Leustean, Ioana and Moanga, Natalia},
  journal       = {CoRR},
  title         = {A many-sorted polyadic modal logic},
  year          = {2018},
  volume        = {abs/1803.09709},
  archiveprefix = {arXiv},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/bib/journals/corr/abs-1803-09709},
  eprint        = {1803.09709},
  file          = {:A many-sorted polyadic modal logic.pdf:PDF},
  timestamp     = {Mon, 13 Aug 2018 16:49:01 +0200},
  url           = {http://arxiv.org/abs/1803.09709},
}

@InProceedings{LM92,
  author    = {Patrick Lincoln and John Mitchell},
  booktitle = {Proceedings of the 7\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science (LICS'92)},
  title     = {Operational aspects of linear lambda calculus},
  year      = {1992},
  address   = {California, USA},
  month     = jun,
  pages     = {235--246},
  publisher = {IEEE},
  doi       = {10.1109/LICS.1992.185536},
  keywords  = {formal logic;theorem proving;linear lambda calculus;sequent calculus proof system;linear logic;natural deduction;proof system;Calculus;Logic programming;Computer science;Safety;Scholarships;Resource management;Linear programming;Neutron spin echo;Concurrent computing},
}

@Article{Loe15,
  author    = {L{\"o}wenheim, Leopold},
  journal   = {Mathematische Annalen},
  title     = {{\"U}ber m{\"o}glichkeiten im relativkalk{\"u}l},
  year      = {1915},
  number    = {4},
  pages     = {447--470},
  volume    = {76},
  publisher = {Springer},
}

@Article{LPP17,
  author    = {Christof L{\"{o}}ding and Madhusudan Parthasarathy and Lucas Pe{\~{n}}a},
  journal   = {Proceedings of the ACM on Programming Languages},
  title     = {Foundations for natural proofs and quantifier instantiation},
  year      = {2017},
  issn      = {2475-1421},
  number    = {10},
  pages     = {1--30},
  volume    = {2},
  acmid     = {3158098},
  publisher = {ACM},
}

@InProceedings{LQ08,
  author    = {Shuvendu Lahiri and Shaz Qadeer},
  booktitle = {Proceedings of the 35\textsuperscript{th} annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL'08)},
  title     = {Back to the future: revisiting precise program verification using {SMT} solvers},
  year      = {2008},
  pages     = {171--182},
  publisher = {ACM},
}

@InProceedings{LR07,
  author    = {Lucanu, Dorel and Ro{\c{s}}u, Grigore},
  booktitle = {CALCO},
  title     = {{CIRC}: a circular coinductive prover},
  year      = {2007},
  pages     = {372--378},
}

@InProceedings{LZL+14,
  author    = {Luo, Qingzhou and Zhang, Yi and Lee, Choonghwan and Jin, Dongyun and Meredith, Patrick O'Neil and \c{S}erb\u{a}nu\c{t}\u{a}, Traian Florin and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 5\textsuperscript{th} International Conference on Runtime Verification (RV'14)},
  title     = {{RV-Monitor}: {E}fficient parametric runtime verification with simultaneous properties},
  year      = {2014},
  pages     = {285--300},
}

@InBook{MA86,
  author    = {Manes, Ernest G. and Arbib, Michael A.},
  chapter   = {14},
  pages     = {318--340},
  publisher = {Springer},
  title     = {Equational specification},
  year      = {1986},
  address   = {New York, NY, USA},
  isbn      = {978-1-4612-4962-7},
  abstract  = {A collection of sets X1, {\ldots}, Xn together with various functions of the form Xi1 x $\cdots$ x Xik{\textrightarrow}Xik+1 constitutes a ``many-sorted algebra.'' Section 1 gives examples of data types which arise as many-sorted algebras. An ``equational specification'' for a data type posits a many-sorted algebraic structure subject to a finite set of equations. What is attractive about this idea is that equational specifications are easily formalized within programming languages and have been partially implemented in experimental languages such as CLEAR, ACT ONE, CLU, and others. This provides a tool to define data types useful in programming and additionally promises to make available a useful research aid for pure mathematicians who study equationally defined algebraic structures.},
  booktitle = {Algebraic Approaches to Program Semantics},
  doi       = {10.1007/978-1-4612-4962-7_14},
  url       = {https://doi.org/10.1007/978-1-4612-4962-7_14},
}

@Article{Mal36,
  author  = {Malc'ev, Anatoli Ivanovi},
  journal = {The Metamathematics of Algebraic Systems: Collected Papers},
  title   = {Axiomatizable classes of locally free algebras of various type},
  year    = {1936},
  number  = {1},
  pages   = {262--281},
  volume  = {1},
}

@PhdThesis{Man08,
  author = {Manzonetto, Giulio},
  school = {Universit{\`{a}} Ca{\textquoteright} Foscari di Venezia},
  title  = {Models and theories of lambda calculus},
  year   = {2008},
  url    = {https://tel.archives-ouvertes.fr/tel-00715207},
}

@InCollection{Mar75,
  author    = {Per Martin-L{\"{o}}f},
  booktitle = {Logic Colloquium},
  publisher = {Elsevier},
  title     = {An intuitionistic theory of types: predicative part},
  year      = {1975},
  address   = {Amsterdam, The Netherlands},
  pages     = {73--118},
  volume    = {80},
}

@InBook{Mar98,
  author    = {Martin-L{\"o}f, Per},
  chapter   = {An intuitionistic theory of types},
  pages     = {127--172},
  publisher = {Oxford University Press},
  title     = {Twenty five years of constructive type theory},
  year      = {1998},
  address   = {Oxford, UK},
  series    = {Oxford Logic Guides Book},
  volume    = {36},
  journal   = {Twenty-five years of constructive type theory},
}

@InCollection{McC63,
  author    = {John McCarthy},
  booktitle = {Computer Programming and Formal Systems},
  publisher = {Elsevier},
  title     = {A basis for a mathematical theory of computation},
  year      = {1963},
  address   = {Amsterdam, The Netherlands},
  editor    = {P. Braffort and D. Hirschberg},
  pages     = {33--70},
  series    = {Studies in Logic and the Foundations of Mathematics},
  volume    = {35},
  abstract  = {Publisher Summary
This chapter discusses the basis for a mathematical theory of computation. It describes several descriptive formalisms with a few examples of their use, and illustrates the theory that enables to prove the equivalence of computations expressed in these formalisms. Some of the formalisms treated are computable functional, non-computable functions, and ambiguous functions. The chapter presents a few mathematical results about the properties of the formalisms introduced. A number of new formalisms for expressing computable functions and related entities are described. The relation between formalism and computer programming languages is discussed.},
  doi       = {10.1016/S0049-237X(08)72018-4},
  issn      = {0049-237X},
}

@Book{Mcn17,
  author = {George F. Mcnulty},
  title  = {Equational logic},
  year   = {2017},
}

@InProceedings{ME19,
  author    = {Murata, Kosuke and Emoto, Kento},
  booktitle = {Programming Languages and Systems},
  title     = {Recursion schemes in {C}oq},
  year      = {2019},
  address   = {Cham},
  editor    = {Lin, Anthony Widjaja},
  pages     = {202--221},
  publisher = {Springer International Publishing},
  abstract  = {Program calculation, a programming technique to derive efficient programs from naive ones by program transformation, is challenging for program optimization. Tesson et al. have shown that Coq, a popular proof assistant, provides a cost-effective way to implement a powerful system for verifying correctness of program transformations, but their applications are limited to list functions in the Theory of Lists. In this paper, we propose an easy-to-use Coq library to prove more advanced calculation rules in Coq for various recursion schemes, which capture recursive programs on an arbitrary algebraic datatype. We prove all the lemmas and theorems about recursion schemes in Coq including histomorphisms and futumorphisms proposed by Uustalu et al. Our library can be used to obtain certified runnable programs from their definitions written with recursion schemes in Coq scripts. We demonstrate a certified runnable program for the Fibonacci numbers and unbounded knapsack problem from their histomorphic definitions.},
  isbn      = {978-3-030-34175-6},
}

@Book{Men79,
  author    = {Mendelson, Elliott},
  publisher = {Springer},
  title     = {Introduction to mathematical logic},
  year      = {1979},
  isbn      = {978-1-4615-7290-9},
}

@Article{Mes12,
  author   = {Meseguer, Jos{\'e}},
  journal  = {The Journal of Logic and Algebraic Programming},
  title    = {Twenty years of rewriting logic},
  year     = {2012},
  number   = {7--8},
  pages    = {721--781},
  volume   = {81},
  abstract = {Rewriting logic is a simple computational logic that can naturally express both concurrent computation and logical deduction with great generality. This paper provides a gentle, intuitive introduction to its main ideas, as well as a survey of the work that many researchers have carried out over the last twenty years in advancing: (i) its foundations; (ii) its semantic framework and logical framework uses; (iii) its language implementations and its formal tools; and (iv) its many applications to automated deduction, software and hardware specification and verification, security, real-time and cyber-physical systems, probabilistic systems, bioinformatics and chemical systems.},
  doi      = {10.1016/j.jlap.2012.06.003},
  numpages = {3},
}

@InProceedings{Mes97,
  author    = {Jos{\'{e}} Meseguer},
  booktitle = {Recent Trends in Algebraic Development Techniques (WADT'97)},
  title     = {Membership algebra as a logical framework for equational specification},
  year      = {1997},
  address   = {Tarquinia, Italy},
  editor    = {Francesco Parisi{-}Presicce},
  pages     = {18--61},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {1376},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/wadt/Meseguer97.bib},
  doi       = {10.1007/3-540-64299-4\_26},
  timestamp = {Tue, 14 May 2019 10:00:54 +0200},
  url       = {https://doi.org/10.1007/3-540-64299-4\_26},
}

@Article{Meseguer92,
  author    = {Jos{\'{e}} Meseguer},
  journal   = {Theor. Comput. Sci.},
  title     = {Conditioned rewriting logic as a united model of concurrency},
  year      = {1992},
  number    = {1},
  pages     = {73--155},
  volume    = {96},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/tcs/Meseguer92.bib},
  doi       = {10.1016/0304-3975(92)90182-F},
  timestamp = {Sun, 28 May 2017 13:20:03 +0200},
  url       = {https://doi.org/10.1016/0304-3975(92)90182-F},
}

@Book{metamath,
  author    = {Norman D. Megill and David A. Wheeler},
  publisher = {Lulu Press},
  title     = {Metamath: a computer language for mathematical proofs},
  year      = {2019},
  address   = {Morrisville, North Carolina},
  note      = {{\tt http://us.metamath.org/downloads/metamath.pdf}},
}

@InCollection{MG85,
  author    = {Jos{\'{e}} Meseguer and Joseph A. Goguen},
  booktitle = {Algebraic Methods in Semantics},
  publisher = {Cambridge University Press},
  title     = {Initiality, induction, and computability},
  year      = {1985},
  address   = {New York, USA},
  pages     = {459--543},
}

@Article{MG93,
  author  = {Meseguer, Jos{\'{e}} and Goguen, Joseph},
  journal = {Information and Computation},
  title   = {Order-sorted algebra solves the constructor-selector, multiple representation, and coercion problems},
  year    = {1993},
  number  = {1},
  pages   = {114--158},
  volume  = {103},
}

@Misc{ml-checker,
  author       = {{K Team}},
  howpublished = {GitHub page \url{https://github.com/kframework/matching-logic-prover/tree/master/checker}},
  title        = {Matching logic proof checker},
  year         = {2020},
}

@Article{MM02,
  author  = {McDowell, Raymond C. and Miller, Dale A.},
  journal = {ACM Transactions on Computational Logic},
  title   = {Reasoning with higher-order abstract syntax in a logical framework},
  year    = {2002},
  number  = {1},
  pages   = {80--136},
  volume  = {3},
  doi     = {10.1145/504077.504080},
}

@Article{Mos04,
  author    = {Peter D. Mosses},
  journal   = {Journal of Logic \& Algebraic Programming},
  title     = {Modular structural operational semantics},
  year      = {2004},
  pages     = {195--228},
  volume    = {60-61},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee        = {http://dx.doi.org/10.1016/j.jlap.2004.03.008},
}

@InProceedings{MP67,
  author    = {John Mccarthy and James Painter},
  booktitle = {Proceedings of Symposiain Applied Mathematics},
  title     = {Correctness of a compiler for arithmetic expressions},
  year      = {1967},
  address   = {Rhode Island, USA},
  pages     = {33--41},
  publisher = {American Mathematical Society},
  volume    = {19},
}

@InProceedings{MP93,
  author    = {McKinna, James and Pollack, Robert},
  booktitle = {Typed Lambda Calculi and Applications},
  title     = {Pure type systems formalized},
  year      = {1993},
  address   = {Berlin, Heidelberg},
  editor    = {Bezem, Marc and Groote, Jan Friso},
  pages     = {289--305},
  publisher = {Springer},
  abstract  = {In doing this work of formalizing a well known body of mathematics, we spent a large amount of time solving mathematical problems, e.g. the Thinning Lemma. Another big problem was maintaining and organizing the formal knowledge, e.g. allowing two people to extend different parts of the data base at the same time, and finding the right lemma in the mass of checked material. We feel that better understanding of mathematical issues of formalization (e.g. names/namefree, intentional/extentional), and organization of formal development are the most useful areas to work on now for the long-term goal of formal mathematics.},
  doi       = {10.1007/BFb0037113},
  isbn      = {978-3-540-47586-6},
}

@InProceedings{MPR18,
  author    = {Moore, Brandon and Pe{\~{n}}a, Lucas and Ro{\c{s}}u, Grigore},
  booktitle = {Proceedings of the 27\textsuperscript{th} European Symposium on Programming (ESOP'18)},
  title     = {Program verification by coinduction},
  year      = {2018},
  pages     = {589--618},
  publisher = {Springer},
}

@Article{MPW92,
  author   = {Robin Milner and Joachim Parrow and David Walker},
  journal  = {Information and Computation},
  title    = {A calculus of mobile processes (part 1)},
  year     = {1992},
  issn     = {0890-5401},
  number   = {1},
  pages    = {1--40},
  volume   = {100},
  abstract = {We present the $\phi$-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The $\phi$-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the $\phi$-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the $\phi$-calculus of higher-order functions (the $\lambda$-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions---i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.},
  doi      = {https://doi.org/10.1016/0890-5401(92)90008-4},
  url      = {http://www.sciencedirect.com/science/article/pii/0890540192900084},
}

@InProceedings{MQS12,
  author    = {Madhusudan, Parthasarathy and Qiu, Xiaokang and Stefanescu, Andrei},
  booktitle = {Proceedings of the 39\textsuperscript{th} Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL'12)},
  title     = {Recursive proofs for inductive tree data-structures},
  year      = {2012},
  pages     = {123--136},
  publisher = {ACM},
  acmid     = {2103673},
  isbn      = {978-1-4503-1083-3},
  keywords  = {heap analysis, recursive program, smt solvers, tree},
  location  = {Philadelphia, PA, USA},
  numpages  = {14},
}

@Article{MR13,
  author  = {Meseguer, Jos{\'e} and Ro{\c{s}}u, Grigore},
  journal = {Information and Computation},
  title   = {The rewriting logic semantics project: a progress report},
  year    = {2013},
  month   = oct,
  note    = {Invited paper at FCT 2011},
  pages   = {38--69},
  volume  = {231},
  doi     = {10.1016/j.ic.2013.08.004},
}

@Article{MS92,
  author   = {Vincenzo Manca and Antonino Salibra},
  journal  = {Theoretical Computer Science},
  title    = {Soundness and completeness of the {B}irkhoff equational calculus for many-sorted algebras with possibly empty carrier sets},
  year     = {1992},
  issn     = {0304-3975},
  number   = {1},
  pages    = {101--124},
  volume   = {94},
  abstract = {Since the many-sorted extension of the Birkhoff equational calculus is unsound when algebras with empty carrier sets are admitted, Goguen and Meseguer proposed a new sound and complete many-sorted equational calculus. This paper presents another approach, alternative to that proposed by Goguen and Meseguer that makes sound and complete the many-sorted extension of the Birkhoff equational calculus. The possibility of maintaining the classical rules is obtained by introducing a new notion of satisfiability, called strong satisfiability. An easier notion of satisfiability called weak satisfiability is also studied, and sufficient and necessary conditions are developed in order to reduce the strong satisfiability to the weak one. In fact, strongly sensible signatures, which generalize sensible signatures introduced by Huet and Oppen, guarantee the equivalence between strong, weak and other usual satisfiabilities. Finally, general conditions for the equivalence of the Birkhoff calculus to the Goguen-Meseguer calculus are established.},
  doi      = {10.1016/0304-3975(92)90325-A},
}

@InProceedings{MTLT08,
  author    = {Stephen Magill and Ming-Hsien Tsai and Peter Lee and Yih-Kuen Tsay},
  booktitle = {Proceedings of the 20\textsuperscript{th} International Conference on Computer Aided Verification (CAV'08)},
  title     = {{THOR}: {A} tool for reasoning about shape and arithmetic},
  year      = {2008},
  pages     = {428--432},
  publisher = {Springer},
  volume    = {5123},
}

@Book{MV97,
  author    = {Marx, Maarten and Venema, Yde},
  publisher = {Springer},
  title     = {Multi-dimensional modal logic},
  year      = {1997},
  series    = {Applied Logic Series},
  volume    = {4},
}

@InProceedings{NC08,
  author    = {Nguyen, Huu Hai and Chin, Wei-Ngan},
  booktitle = {Proceedings of the 20\textsuperscript{th} International Conference on Computer Aided Verification (CAV'08)},
  title     = {Enhancing program verification with lemmas},
  year      = {2008},
  pages     = {355--369},
  publisher = {Springer},
  acmid     = {1427827},
  isbn      = {978-3-540-70543-7},
  numpages  = {15},
}

@TechReport{NDFK10,
  author      = {Nelson, Timothy and Dougherty, Daniel and Fisler, Kathi and Krishnamurthi, Shriram},
  institution = {Worcester Polytechnic Institute, Brown University},
  title       = {On the finite model property in order-sorted logic},
  year        = {2010},
}

@PhdThesis{Nor07,
  author  = {Ulf Norell},
  school  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  title   = {Towards a practical programming language based on dependent type theory},
  year    = {2007},
  address = {SE-412 96 G\"{o}teborg, Sweden},
  month   = sep,
}

@InProceedings{Nor09,
  author    = {Norell, Ulf},
  booktitle = {Proceedings of the 6\textsuperscript{th} International Conference on Advanced Functional Programming (AFP'09)},
  title     = {Dependently typed programming in {A}gda},
  year      = {2009},
  address   = {Heijen, The Netherlands},
  pages     = {230--266},
  publisher = {Springer},
}

@Article{NW96,
  author   = {Damian Niwi{{\'{n}}}ski and Igor Walukiewicz},
  journal  = {Theoretical Computer Science},
  title    = {Games for the $\mu$-calculus},
  year     = {1996},
  issn     = {0304-3975},
  number   = {1},
  pages    = {99--116},
  volume   = {163},
  abstract = {Given a formula of the propositional $\mu$-calculus, we construct a tableau of the formula and define an infinite game of two players of which one wants to show that the formula is satisfiable, and the other seeks the opposite. The strategy for the first player can be further transformed into a model of the formula while the strategy for the second forms what we call a refutation of the formula. Using Martin's Determinacy Theorem, we prove that any formula has either a model or a refutation. This completeness result is a starting point for the completeness theorem for the $\mu$-calculus to be presented elsewhere. However, we argue that refutations have some advantages of their own. They are generated by a natural system of sound logical rules and can be presented as regular trees of the size exponential in the size of a refuted formula. This last aspect completes the small model theorem for the $\mu$-calculus established by Emerson and Jutla (1988). Thus, on a more practical side, refutations can be used as small objects testifying incorrectness of a program specification expressed by a $\mu$-formula, we illustrate this point by an example.},
  doi      = {https://doi.org/10.1016/0304-3975(95)00136-0},
  url      = {http://www.sciencedirect.com/science/article/pii/0304397595001360},
}

@Book{NWP02,
  author    = {Nipkow, Tobias and Wenzel, Markus and Paulson, Lawrence},
  publisher = {Springer},
  title     = {{I}sabelle/{HOL}: {A} proof assistant for higher-order logic},
  year      = {2002},
}

@InProceedings{OBJ2,
  author    = {Futatsugi, Kokichi and Goguen, Joseph A. and Jouannaud, Jean-Pierre and Meseguer, Jos\'{e}},
  booktitle = {Proceedings of the 12\textsuperscript{th} ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages},
  title     = {Principles of {OBJ}2},
  year      = {1985},
  address   = {New York, NY, USA},
  pages     = {52--66},
  publisher = {Association for Computing Machinery},
  series    = {POPL {\textquoteright}85},
  doi       = {10.1145/318593.318610},
  isbn      = {0897911474},
  location  = {New Orleans, Louisiana, USA},
  numpages  = {15},
  url       = {https://doi.org/10.1145/318593.318610},
}

@Article{OH19,
  author     = {O'Hearn, Peter},
  journal    = {Communications of the ACM},
  title      = {Separation logic},
  year       = {2019},
  number     = {2},
  pages      = {86--95},
  volume     = {62},
  acmid      = {3211968},
  address    = {New York, NY, USA},
  issue_date = {February 2019},
  numpages   = {10},
  publisher  = {ACM},
}

@Article{Pai67,
  author  = {Painter, J. A.},
  journal = {Stanford Artificial Intelligence Memo. No. 44},
  title   = {Semantic correctness of a compiler for an {A}lgol-like language},
  year    = {1967},
  number  = {1},
  pages   = {1--260},
  volume  = {1},
}

@Article{Par69,
  author  = {Park, David},
  journal = {Machine Intelligence},
  title   = {Fixpoint induction and proofs of program properties},
  year    = {1969},
  pages   = {59--78},
  volume  = {5},
}

@Article{Pau89,
  author   = {Paulson, Lawrence C.},
  journal  = {Journal of Automated Reasoning},
  title    = {The foundation of a generic theorem prover},
  year     = {1989},
  issn     = {1573-0670},
  number   = {3},
  pages    = {363--397},
  volume   = {5},
  abstract = {Isabelle [28, 30] is an interactive theorem prover that supports a variety of logics. It represents rules as propositions (not as functions) and builds proofs by combining rules. These operations constitute a meta-logic (or 'logical framework') in which the object-logics are formalized. Isabelle is now based on higher-order logic-a precise and well-understood foundation.},
  doi      = {10.1007/BF00248324},
  url      = {https://doi.org/10.1007/BF00248324},
}

@InProceedings{PE88,
  author    = {Pfenning, Frank and Elliott, Conal},
  booktitle = {Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'88)},
  title     = {Higher-order abstract syntax},
  year      = {1988},
  address   = {New York, NY, USA},
  pages     = {199--208},
  publisher = {ACM},
  doi       = {10.1145/53990.54010},
}

@Book{Pea89,
  author    = {Peano, Giuseppe},
  publisher = {Fratres Bocca},
  title     = {Arithmetices principia: {N}ova methodo exposita},
  year      = {1889},
}

@Article{Pit03,
  author   = {Andrew M. Pitts},
  journal  = {Information and Computation},
  title    = {Nominal logic, a first order theory of names and binding},
  year     = {2003},
  issn     = {0890-5401},
  number   = {2},
  pages    = {165--193},
  volume   = {186},
  doi      = {10.1016/S0890-5401(03)00138-X},
  file     = {:Nominal logic, A first order theory of names and binding.pdf:PDF},
  keywords = {Abstract syntax, Variable binding, Permutation, Fresh names},
}

@InProceedings{Pit05,
  author    = {Pitts, Andrew M.},
  booktitle = {Theorem Proving in Higher Order Logics},
  title     = {Alpha-structural recursion and induction},
  year      = {2005},
  address   = {Berlin, Heidelberg},
  editor    = {Hurd, Joe and Melham, Tom},
  pages     = {17--34},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {There is growing evidence for the usefulness of name permutations when dealing with syntax involving names and name-binding. In particular they facilitate an attractively simple formalisation of common, but often technically incorrect uses of structural recursion and induction for abstract syntax trees modulo $\alpha$-equivalence. At the heart of this formalisation is the notion of finitely supported mathematical objects. This paper explains the idea in as concrete a way as possible and gives a new derivation within higher-order logic of principles of $\alpha$-structural recursion and induction for $\alpha$-equivalence classes from the ordinary versions of these principles for abstract syntax trees.},
  isbn      = {978-3-540-31820-0},
}

@Book{Pit13,
  author     = {Pitts, Andrew M.},
  publisher  = {Cambridge University Press},
  title      = {Nominal sets: names and symmetry in computer science},
  year       = {2013},
  address    = {New York, NY, USA},
  series     = {Cambridge Tracts in Theoretical Computer Science},
  collection = {Cambridge Tracts in Theoretical Computer Science},
  doi        = {10.1017/CBO9781139084673},
  place      = {Cambridge},
}

@InProceedings{Pla12,
  author    = {A. Platzer},
  booktitle = {Proceedings of the 27\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science},
  title     = {The complete proof theory of hybrid systems},
  year      = {2012},
  pages     = {541--550},
  file      = {:The complete proof theory of hybrid systems.pdf:PDF},
  issn      = {1043-6871},
  keywords  = {continuous systems;discrete systems;inference mechanisms;theorem proving;hybrid system axiomatization;continuous dynamical systems;discrete dynamical systems;complete proof-theoretical alignment;discrete reasoning;continuous reasoning;Approximation methods;Differential equations;Cognition;Polynomials;Computer science;Vectors;proof theory;hybrid dynamical systems;differential dynamic logic;axiomatization;completeness},
}

@Article{Plo04,
  author    = {G. D. Plotkin},
  journal   = {Journal of Logic \& Algebraic Programming},
  title     = {A structural approach to operational semantics},
  year      = {2004},
  pages     = {17--139},
  volume    = {60-61},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  xxxnote   = {Original version: University of Aarhus Technical Report DAIMI FN-19, 1981},
}

@TechReport{Plo72,
  author      = {Gordon Plotkin},
  institution = {University of Edinburgh},
  title       = {A set-theoretical definition of application},
  year        = {1972},
}

@InProceedings{Pnu77,
  author    = {Pnueli, Amir},
  booktitle = {Proceedings of the 18\textsuperscript{th} Annual Symposium on Foundations of Computer Science (SFCS'77)},
  title     = {The temporal logic of programs},
  year      = {1977},
  pages     = {46--57},
  publisher = {IEEE},
}

@Article{Poigne90,
  author    = {Axel Poign{\'{e}}},
  journal   = {J. Comput. Syst. Sci.},
  title     = {Parametrization for order-sorted algebraic specification},
  year      = {1990},
  number    = {2},
  pages     = {229--268},
  volume    = {40},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/jcss/Poigne90.bib},
  doi       = {10.1016/0022-0000(90)90013-B},
  timestamp = {Sat, 20 May 2017 00:25:55 +0200},
  url       = {https://doi.org/10.1016/0022-0000(90)90013-B},
}

@InProceedings{PR11,
  author    = {P{\'{e}}rez, Juan Antonio Navarro and Rybalchenko, Andrey},
  booktitle = {Proceedings of the 32\textsuperscript{nd} annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'11)},
  title     = {Separation logic + superposition calculus = heap theorem prover},
  year      = {2011},
  pages     = {556--566},
  publisher = {ACM},
}

@TechReport{PR13,
  author      = {Andrei Popescu and Grigore Ro\c{s}u},
  institution = {Technische Universitat Munchen, University of Illinois at Urbana-Champaign},
  title       = {Term-generic logic (extended technical report)},
  year        = {2013},
}

@Article{PR15,
  author   = {Andrei Popescu and Grigore Ro{\c{s}}u},
  journal  = {Theoretical Computer Science},
  title    = {Term-generic logic},
  year     = {2015},
  issn     = {0304-3975},
  pages    = {1--24},
  volume   = {577},
  abstract = {We introduce term-generic logic (TGL), a first-order logic parameterized with terms defined axiomatically (rather than constructively), by requiring terms to only provide free variable and substitution operators satisfying some reasonable axioms. TGL has a notion of model that generalizes both first-order models and Henkin models of the $\lambda$-calculus. The abstract notions of term syntax and model are shown to be sufficient for obtaining the completeness theorem of a Gentzen system generalizing that of first-order logic. Various systems featuring bindings and contextual reasoning, ranging from pure type systems to the $\phi$-calculus, are captured as theories inside TGL. For two particular, but rather typical instances---untyped $\lambda$-calculus and System F---the general-purpose TGL models are shown to be equivalent with standard ad hoc models.},
  doi      = {10.1016/j.tcs.2015.01.047},
  keywords = {Term-generic logic, Substitution, -Calculus, -Calculus, Semantics},
}

@InProceedings{Pra76,
  author    = {Pratt, Vaughan},
  booktitle = {Proceedings of the 17\textsuperscript{th} Annual Symposium on Foundations of Computer Science (SFCS'76)},
  title     = {Semantical consideration on {F}loyd-{H}oare logic},
  year      = {1976},
  pages     = {109--121},
  publisher = {IEEE},
}

@Book{Pri55,
  author    = {Arthur Prior},
  publisher = {Greenwood Press},
  title     = {Time and modality},
  year      = {1955},
  address   = {California, USA},
}

@InProceedings{PS99,
  author    = {Pfenning, Frank and Sch{\"u}rmann, Carsten},
  booktitle = {Proceedings of the 16\textsuperscript{th} International Conference on Automated Deduction (CADE 99)},
  title     = {System description: {T}welf---a meta-logical framework for deductive systems},
  year      = {1999},
  address   = {Trento, Italy},
  pages     = {202--206},
  publisher = {Springer},
  abstract  = {Twelf is a meta-logical framework for the specification, implementation, and meta-theory of deductive systems from the theory of programming languages and logics. It relies on the LF type theory and the judgments-as-types methodology for specification [HHP93], a constraint logic programming interpreter for implementation [Pfe91], and the meta-logic M2 for reasoning about object languages encoded in LF [SP98]. It is a significant extension and complete reimplementation of the Elf system [Pfe94].},
  doi       = {10.1007/3-540-48660-7_14},
}

@InProceedings{PSR15,
  author    = {Park, Daejun and \c{S}tef\u{a}nescu, Andrei and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 36\textsuperscript{th} annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'15)},
  title     = {{KJS}: {A} complete formal semantics of {JavaScript}},
  year      = {2015},
  address   = {Portland, OR},
  pages     = {346--356},
  publisher = {ACM},
}

@InProceedings{PWZ13,
  author    = {Ruzica Piskac and Thomas Wies and Damien Zufferey},
  booktitle = {Proceedings of the 25\textsuperscript{th} International Conference on Computer Aided Verification (CAV'13)},
  title     = {Automating separation logic using {SMT}},
  year      = {2013},
  pages     = {773--789},
  publisher = {Springer},
  volume    = {8044},
}

@InProceedings{QGSM13,
  author    = {Qiu, Xiaokang and Garg, Pranav and \c{S}tef\u{a}nescu, Andrei and Madhusudan, Parthasarathy},
  booktitle = {Proceedings of the 34\textsuperscript{th} annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'13)},
  title     = {Natural proofs for structure, data, and separation},
  year      = {2013},
  pages     = {231--242},
  publisher = {ACM},
  acmid     = {2462169},
  isbn      = {978-1-4503-2014-6},
  keywords  = {data structures, heap analysis, natural proofs, separation logic, smt solvers},
  location  = {Seattle, Washington, USA},
  numpages  = {12},
}

@Article{Qua88,
  author    = {Robert W. Quackenbush},
  journal   = {Proceedings of the American Mathematical Society},
  title     = {Completeness theorems for universal and implicational logics of algebras via congruences},
  year      = {1988},
  number    = {4},
  pages     = {1015--1021},
  volume    = {103},
  abstract  = {In this paper, simple algebraic proofs are given for the completeness theorems for the implicational and universal logics of algebras. The proofs are obtained by examining congruences, $\theta$, on the algebra of terms, $F(\omega)$, such that $F(\omega)/\theta$ belongs to the given class of algebras. Thus, they are direct analogs of G. Birkhoff's proof of the completeness theorem for equational logic.},
  doi       = {10.2307/2047077},
  publisher = {American Mathematical Society},
}

@InProceedings{R12,
  author    = {{\c{S}}erb\u{a}nu\c{t}\u{a}, Traian Florin and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 6\textsuperscript{th} International Conference on Graph Transformation (ICGT'12)},
  title     = {A truly concurrent semantics for the {K} framework based on graph transformations},
  year      = {2012},
  address   = {Bremen, Germany},
  pages     = {294--310},
  publisher = {Springer},
}

@Book{Rau10,
  author    = {Wolfgang Rautenberg},
  publisher = {Springer New York},
  title     = {A concise introduction to mathematical logic},
  year      = {2010},
  doi       = {10.1007/978-1-4419-1221-3},
}

@InProceedings{RBH07,
  author    = {Zvonimir Rakamari{\'{c}} and Jesse Bingham and Alan J. Hu},
  booktitle = {Proceedings of the 8\textsuperscript{th} International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI'07)},
  title     = {An inference-rule-based decision procedure for verification of heap-manipulating programs with mutable data and cyclic data structures},
  year      = {2007},
  pages     = {106--121},
  publisher = {Springer},
  volume    = {4349},
}

@InProceedings{RBHC07,
  author    = {Zvonimir Rakamari{\'{c}} and Roberto Bruttomesso and Alan J. Hu and Alessandro Cimatti},
  booktitle = {Proceedings of the 5\textsuperscript{th} International Symposium on Automated Technology for Verification and Analysis (ATVA'07)},
  title     = {Verifying heap-manipulating programs in an {SMT} framework},
  year      = {2007},
  pages     = {237--252},
  publisher = {Springer},
  volume    = {4762},
}

@Article{Rey01,
  author    = {Reynolds, M.},
  journal   = {Journal of Symbolic Logic},
  title     = {An axiomatization of full computation tree logic},
  year      = {2001},
  number    = {3},
  pages     = {1011--1057},
  volume    = {66},
  publisher = {Cambridge University Press},
}

@InProceedings{Rey02,
  author    = {Reynolds, John C.},
  booktitle = {Proceedings of the 17\textsuperscript{th} Annual IEEE Symposium on Logic in Computer Science (LICS'02)},
  title     = {Separation logic: a logic for shared mutable data structures},
  year      = {2002},
  address   = {Copenhagen, Denmark},
  pages     = {55--74},
  publisher = {IEEE},
}

@InProceedings{Rey74,
  author    = {Reynolds, John C.},
  booktitle = {Programming Symposium},
  title     = {Towards a theory of type structure},
  year      = {1974},
  address   = {Berlin, Heidelberg},
  pages     = {408--425},
  publisher = {Springer},
  doi       = {10.1007/3-540-06859-7_148},
  isbn      = {978-3-540-37819-8},
}

@InProceedings{RM10,
  author    = {Rocha, Camilo and Meseguer, Jos{\'e}},
  booktitle = {Logic for Programming, Artificial Intelligence, and Reasoning},
  title     = {Constructors, sufficient completeness, and deadlock freedom of rewrite theories},
  year      = {2010},
  address   = {Berlin, Heidelberg},
  editor    = {Ferm{\"u}ller, Christian G. and Voronkov, Andrei},
  pages     = {594--609},
  publisher = {Springer},
  abstract  = {Sufficient completeness has been throughly studied for equational specifications, where function symbols are classified into constructors and defined symbols. But what should sufficient completeness mean for a rewrite theory {\$}{\backslash}mathcal{\{}R{\}} = ({\backslash}Sigma,E,R){\$}with equations E and non-equational rules R describing concurrent transitions in a system? This work argues that a rewrite theory naturally has two notions of constructor: the usual one for its equations E, and a different one for its rules R. The sufficient completeness of constructors for the rules R turns out to be intimately related with deadlock freedom, i.e., {\$}{\backslash}mathcal{\{}R{\}}{\$}has no deadlocks outside the constructors for R. The relation between these two notions is studied in the setting of unconditional order-sorted rewrite theories. Sufficient conditions are given allowing the automatic checking of sufficient completeness, deadlock freedom, and other related properties, by propositional tree automata modulo equational axioms such as associativity, commutativity, and identity. They are used to extend the Maude Sufficient Completeness Checker from the checking of equational theories to that of both equational and rewrite theories. Finally, the usefulness of the proposed notion of constructors in proving inductive theorems about the reachability rewrite relation {\$}{\backslash}rightarrow{\_}{\backslash}mathcal{\{}R{\}}{\$}associated to a rewrite theory {\$}{\backslash}mathcal{\{}R{\}}{\$}(and also about the joinability relation {\$}{\backslash}downarrow{\_}{\backslash}mathcal{\{}R{\}}{\$}) is both characterized and illustrated with an example.},
  doi       = {10.1007/978-3-642-16242-8_42},
  isbn      = {978-3-642-16242-8},
}

@Article{Ros17,
  author  = {Ro\c{s}u, Grigore},
  journal = {Logical Methods in Computer Science},
  title   = {Matching logic},
  year    = {2017},
  number  = {4},
  pages   = {1--61},
  volume  = {13},
  doi     = {10.23638/LMCS-13(4:28)2017},
  file    = {:Matching logic.pdf:PDF},
}

@InProceedings{Ros17a,
  author    = {Rosu, Grigore},
  booktitle = {Dependable Software Systems Engineering},
  title     = {{K}---{A} semantic framework for programming languages and formal analysis tools},
  year      = {2017},
  publisher = {{IOS} Press},
}

@Article{Ros18,
  author    = {Ro\c{s}u, Grigore},
  journal   = {Formal Methods in System Design},
  title     = {Finite-trace linear temporal logic: {C}oinductive completeness},
  year      = {2018},
  number    = {1},
  pages     = {138--163},
  volume    = {53},
  file      = {:Finite-trace linear temporal logic, Coinductive completeness.pdf:PDF},
  publisher = {Springer},
}

@Article{Ros35,
  author  = {Rosser, John Barkley},
  journal = {Annals of Mathematics},
  title   = {A mathematical logic without variables, {Part} 1},
  year    = {1935},
  number  = {1},
  pages   = {127--150},
  volume  = {36},
}

@InProceedings{RP08,
  author    = {R{\'e}gis-Gianas, Yann and Pottier, Fran{\c{c}}ois},
  booktitle = {Proceedings of the 9\textsuperscript{th} International Conference on Mathematics of Program Construction (MPC'08)},
  title     = {A {H}oare logic for call-by-value functional programs},
  year      = {2008},
  pages     = {305--335},
  publisher = {Springer},
  volume    = {5133},
}

@TechReport{RS09,
  author      = {Grigore Ro\c{s}u and Wolfram Schulte},
  institution = {University of Illinois at Urbana-Champaign},
  title       = {Matching logic---extended report},
  year        = {2009},
  month       = jan,
  number      = {Department of Computer Science UIUCDCS-R-2009-3026},
}

@Article{RS10,
  author  = {Ro{\c{s}}u, Grigore and {\c{S}}erb{\u{a}}nu{\c{t}}{\u{a}}, Traian Florin},
  journal = {Journal of Logic and Algebraic Programming},
  title   = {An overview of the {K} semantic framework},
  year    = {2010},
  number  = {6},
  pages   = {397--434},
  volume  = {79},
  doi     = {10.1016/j.jlap.2010.03.012},
  ee      = {http://dx.doi.org/10.1016/j.jlap.2010.03.012},
}

@InProceedings{RS12,
  author    = {Ro\c{s}u, Grigore and \c{S}tef\u{a}nescu, Andrei},
  booktitle = {Proceedings of the 18\textsuperscript{th} International Symposium on Formal Methods (FM'12)},
  title     = {From {H}oare logic to matching logic reachability},
  year      = {2012},
  pages     = {387--402},
  publisher = {Springer},
}

@InProceedings{RSCM13,
  author    = {Ro\c{s}u, Grigore and \c{S}tef\u{a}nescu, Andrei and Ciob\^{a}c{\u{a}}, {\c{S}}tefan and Moore, Brandon M.},
  booktitle = {Proceedings of the 28\textsuperscript{th} Symposium on Logic in Computer Science (LICS'13)},
  title     = {One-path reachability logic},
  year      = {2013},
  pages     = {358--367},
  publisher = {IEEE},
}

@InProceedings{RT93,
  author    = {Jan J. M. M. Rutten and Daniele Turi},
  booktitle = {A Decade of Concurrency, Reflections and Perspectives, {REX} School/Symposium, Noordwijkerhout, The Netherlands, June 1-4, 1993, Proceedings},
  title     = {Initial algebra and final coalgebra semantics for concurrency},
  year      = {1993},
  address   = {Noordwijkerhout, The Netherlands},
  editor    = {J. W. de Bakker and Willem P. de Roever and Grzegorz Rozenberg},
  pages     = {530--582},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {803},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/rex/RuttenT93.bib},
  doi       = {10.1007/3-540-58043-3\_28},
  timestamp = {Tue, 14 May 2019 10:00:52 +0200},
  url       = {https://doi.org/10.1007/3-540-58043-3\_28},
}

@InProceedings{RZ06,
  author    = {Silvio Ranise and Calogero Zarba},
  booktitle = {Proceedings of the 4\textsuperscript{th} IEEE International Conference on Software Engineering and Formal Methods (SEFM'06)},
  title     = {A theory of singly-linked lists and its extensible decision procedure},
  year      = {2006},
  pages     = {206--215},
  publisher = {IEEE},
}

@InProceedings{SA13,
  author    = {Svenningsson, Josef and Axelsson, Emil},
  booktitle = {Trends in Functional Programming},
  title     = {Combining deep and shallow embedding for {EDSL}},
  year      = {2013},
  address   = {Berlin, Heidelberg},
  pages     = {21--36},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {When compiling embedded languages it is natural to use an abstract syntax tree to represent programs. This is known as a deep embedding and it is a rather cumbersome technique compared to other forms of embedding, typically leading to more code and being harder to extend. In shallow embeddings, language constructs are mapped directly to their semantics which yields more flexible and succinct implementations. But shallow embeddings are not well-suited for compiling embedded languages. We present a technique to combine deep and shallow embedding in the context of compiling embedded languages in order to provide the benefits of both techniques. In particular it helps keeping the deep embedding small and it makes extending the embedded language much easier. Our technique also has some unexpected but welcome knock-on effects. It provides fusion of functions to remove intermediate results for free without any additional effort. It also helps to give the embedded language a more natural programming interface.},
  isbn      = {978-3-642-40447-4},
}

@Article{Sch24,
  author    = {Sch{\"o}nfinkel, Moses},
  journal   = {Mathematische annalen},
  title     = {{\"U}ber die bausteine der mathematischen logik},
  year      = {1924},
  number    = {3-4},
  pages     = {305--316},
  volume    = {92},
  publisher = {Springer},
}

@Article{Sch91,
  author    = {Schellinx, Harold},
  journal   = {Journal of Symbolic Logic},
  title     = {Isomorphisms and nonisomorphisms of graph models},
  year      = {1991},
  issn      = {0022-4812},
  month     = oct,
  number    = {1},
  pages     = {227--249},
  volume    = {56},
  address   = {Storrs, Connecticut},
  doi       = {10.2307/2274916},
  numpages  = {23},
  publisher = {Association for Symbolic Logic},
}

@InProceedings{SCM+14,
  author    = {\c{S}tef\u{a}nescu, Andrei and Ciob\^{a}c\u{a}, \c{S}tefan and Mereu\c{t}\u{a}, Radu and Moore, Brandon M. and \c{S}erb\u{a}nu\c{t}\u{a}, Traian Florin and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the Joint 25\textsuperscript{th} International Conference on Rewriting Techniques and Applications and 12\textsuperscript{th} International Conference on Typed Lambda Calculi and Applications (RTA-TLCA'14)},
  title     = {All-path reachability logic},
  year      = {2014},
  pages     = {425--440},
  publisher = {Springer},
  volume    = {8560},
  file      = {:All-path reachability logic.pdf:PDF},
}

@InProceedings{Sco72,
  author    = {Scott, Dana},
  booktitle = {Toposes, Algebraic Geometry and Logic},
  title     = {Continuous lattices},
  year      = {1972},
  address   = {Berlin, Heidelberg},
  pages     = {97--136},
  publisher = {Springer},
  abstract  = {Starting from the topological point of view a certain wide class of To-spaces is introduced having a very strong extension property for continuous functions with values in these spaces. It is then shown that all such spaces are complete lattices whose lattice structure determines the topology --- these are the continuous lattices --- and every such lattice has the extension property. With this foundation the lattices are studied in detail with respect to projections, subspaces, embeddings, and constructions such as products, sums, function spaces, and inverse limits. The main result of the paper is a proof that every topological space can be embedded in a continuous lattice which is homeomorphic (and isomorphic) to its own function space. The function algebra of such spaces provides mathematical models for the Church-Curry $\lambda$-calculus.},
  doi       = {10.1007/BFb0073967},
  isbn      = {978-3-540-37609-5},
}

@InProceedings{Sco75,
  author    = {Scott, Dana},
  booktitle = {Proceedings of the International Symposium on $\lambda$-Calculus and Computer Science Theory},
  title     = {Some philosophical issues concerning theories of combinators},
  year      = {1975},
  address   = {Berlin, Heidelberg},
  pages     = {346--366},
  publisher = {Springer},
  abstract  = {The paper presents in an informal way several conflicting viewpoints concerning concepts, theories, models, and applications of $\lambda$-calculus and the combinators.},
  doi       = {10.1007/BFb0029537},
  isbn      = {978-3-540-37944-7},
}

@Article{Sco75a,
  author  = {Scott, Dana},
  journal = {SIAM Journal on Computing},
  title   = {Data types as lattices},
  year    = {1975},
  number  = {3},
  pages   = {522--587},
  volume  = {5},
  doi     = {10.1137/0205037},
}

@InProceedings{Sco82,
  author       = {Scott, Dana},
  booktitle    = {International Colloquium on Automata, Languages, and Programming},
  title        = {Domains for denotational semantics},
  year         = {1982},
  address      = {Berlin Heidelberg, Germany},
  organization = {Springer},
  pages        = {577--610},
  publisher    = {Springer},
}

@InProceedings{SCR12,
  author    = {\c{S}erb\u{a}nu\c{t}\u{a}, Traian Florin and Chen, Feng and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 3\textsuperscript{rd} International Conference on Runtime Verification (RV'12)},
  title     = {Maximal causal models for sequentially consistent systems},
  year      = {2012},
  pages     = {136--150},
  publisher = {Springer},
  volume    = {7687},
}

@Article{SDP01,
  author   = {Carsten Sch{\"{u}}rmann and Jo{\"{e}}lle Despeyroux and Frank Pfenning},
  journal  = {Theoretical Computer Science},
  title    = {Primitive recursion for higher-order abstract syntax},
  year     = {2001},
  issn     = {0304-3975},
  number   = {1},
  pages    = {1--57},
  volume   = {266},
  abstract = {Higher-order abstract syntax is a central representation technique in logical frameworks which maps variables of the object language into variables of the meta-language. It leads to concise encodings, but is incompatible with functions defined by primitive recursion or proofs by induction. In this paper we propose an extension of the simply typed lambda-calculus with iteration and case constructs which preserves the adequacy of higher-order abstract syntax encodings. The well-known paradoxes are avoided through the use of a modal operator which obeys the laws of S4. In the resulting calculus many functions over higher-order representations can be expressed elegantly. Our central technical result, namely that our calculus is conservative over the simply typed lambda-calculus, is proved by a rather complex argument using logical relations. We view our system as an important first step towards allowing the methodology of LF to be employed effectively in systems based on induction principles such as ALF, Coq, or NuPrl, leading to a synthesis of currently incompatible paradigms.},
  doi      = {https://doi.org/10.1016/S0304-3975(00)00418-7},
  keywords = {Typed lambda calculus, Higher-order abstract syntax, Primitive recursion, Modal logic},
  url      = {http://www.sciencedirect.com/science/article/pii/S0304397500004187},
}

@Article{See84,
  author    = {Seely, R. A. G.},
  journal   = {Mathematical Proceedings of the Cambridge Philosophical Society},
  title     = {Locally cartesian closed categories and type theory},
  year      = {1984},
  number    = {1},
  pages     = {33--48},
  volume    = {95},
  publisher = {Cambridge University Press},
}

@Book{Sho67,
  author    = {Shoenfield, Joseph R.},
  publisher = {Addison-Wesley Pub. Co},
  title     = {Mathematical logic},
  year      = {1967},
  isbn      = {1-56881-135-7},
}

@Article{SNO+10,
  author    = {Sewell, Peter and Nardelli, Francesco Zappa and Owens, Scott and Peskine, Gilles and Ridge, Thomas and Sarkar, Susmit and Strni\v{s}a, Rok},
  journal   = {Journal of Functional Programming},
  title     = {Ott: {E}ffective tool support for the working semanticist},
  year      = {2010},
  number    = {1},
  pages     = {71--122},
  volume    = {20},
  publisher = {Cambridge University Press},
}

@InProceedings{Soj15,
  author    = {Sojakova, Kristina},
  booktitle = {Proceedings of the 42\textsuperscript{nd} Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL'15)},
  title     = {Higher inductive types as homotopy-initial algebras},
  year      = {2015},
  address   = {New York, NY, USA},
  pages     = {31--42},
  publisher = {Association for Computing Machinery},
  series    = {POPL {\textquoteright}15},
  doi       = {10.1145/2676726.2676983},
  isbn      = {9781450333009},
  keywords  = {homotopy-initial algebra, higher inductive type, w-suspension, homotopy type theory},
  location  = {Mumbai, India},
  numpages  = {12},
  url       = {https://doi.org/10.1145/2676726.2676983},
}

@InProceedings{SPY+16,
  author    = {\c{S}tef\u{a}nescu, Andrei and Park, Daejun and Yuwen, Shijiao and Li, Yilong and Ro\c{s}u, Grigore},
  booktitle = {Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'16)},
  title     = {Semantics-based program verifiers for all languages},
  year      = {2016},
  pages     = {74--91},
  publisher = {ACM},
  acmid     = {2984027},
  isbn      = {978-1-4503-4444-9},
  location  = {Amsterdam, Netherlands},
}

@Book{ST12,
  author    = {Donald Sannella and Andrzej Tarlecki},
  publisher = {Springer},
  title     = {Foundations of algebraic specification and formal software development},
  year      = {2012},
  address   = {Berlin Heidelberg, Germany},
  isbn      = {978-3-642-17335-6},
  series    = {Monographs in Theoretical Computer Science. An {EATCS} Series},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/books/daglib/0028275.bib},
  doi       = {10.1007/978-3-642-17336-3},
  timestamp = {Tue, 16 May 2017 14:01:33 +0200},
  url       = {https://doi.org/10.1007/978-3-642-17336-3},
}

@Article{Ste00,
  author   = {Mark-Oliver Stehr},
  journal  = {Electronic Notes in Theoretical Computer Science},
  title    = {{CINNI}---a generic calculus of explicit substitutions and its application to $\lambda$- $\varsigma$- and $\phi$-calculi},
  year     = {2000},
  issn     = {1571-0661},
  pages    = {70--92},
  volume   = {36},
  abstract = {We approach the general problem of representing higher-order languages, that are usually equipped with special variable binding constructs, in a less specialized first-order framework such as membership equational logic and the corresponding version of rewriting logic. The solution we propose is based on CINNI, a new calculus of explicit substitutions that makes use of a term representation that contains both the standard named notation and de Bruijn's indexed notation as special subcases. The calculus is parametric in the syntax of the object language, which allows us to apply it to different object languages such as $\lambda$-calculus, Abadi and Cardelli's object calculus ($\varsigma$-calculus) and Milner's calculus of communicating mobile processes ($\phi$-calculus). As a practical result we obtain executable formal representations of these object languages in Maude with a representational distance close to zero.},
  doi      = {https://doi.org/10.1016/S1571-0661(05)80125-2},
  keywords = {Higher-Order Languages, Explicit Substitutions, Logical Frameworks, Rewriting Logic, Maude, Lambda-Calculus, Sigma-Calculus, Pi-Calculus},
}

@InProceedings{Sub90,
  author    = {Subrahmanyam, Ramesh},
  booktitle = {Foundations of Software Technology and Theoretical Computer Science},
  title     = {Complexity of algebraic specifications},
  year      = {1990},
  address   = {Berlin, Heidelberg},
  editor    = {Nori, Kesav V. and Veni Madhavan, C. E.},
  pages     = {33--47},
  publisher = {Springer},
  abstract  = {In the field of algebraic specification, the semantics of an equationally specified datatype is given by the initial algebra of the specifications. We show in this paper that in general the theory of the initial algebra of a given set of equations is II20-complete. The impossibility of complete finite axiomatization of equations as well as inequations true in the initial algebra is therefore established. We, further, establish that the decision problem is, in general, II10-complete if the equational theory is decidable. We extend the investigation to a certain semantics of parameterized specifications (the so-called free extension functor semantics) that has been proposed in the literature. We present some results characterizing the recursion-theoretic properties of (a) the theory of the free extension algebras of parameter algebras relative to the the theory of the parameter algebras, and (b) the theory of the models of a parameterized specification relative to the theory axiomatized by the specification itself.},
  doi       = {10.1007/3-540-53487-3_33},
}

@InProceedings{SV17,
  author    = {Smits, Jeff and Visser, Eelco},
  booktitle = {Proceedings of the 10\textsuperscript{th} ACM SIGPLAN International Conference on Software Language Engineering (SLE'17)},
  title     = {Flow{S}pec: {D}eclarative dataflow analysis specification},
  year      = {2017},
  pages     = {221--231},
  publisher = {ACM},
}

@Article{SvdW11,
  author  = {Bas Spitters and Eelis van der Weegen},
  journal = {Interactive Theorem Proving and the Formalisation of Mathematics},
  title   = {Type classes for mathematics in type theory},
  year    = {2011},
  number  = {4},
  pages   = {795--825},
  volume  = {21},
  doi     = {10.1017/S0960129511000119},
}

@Article{Tar55,
  author    = {Tarski, Alfred},
  journal   = {Pacific Journal of Mathematics},
  title     = {A lattice-theoretical fixpoint theorem and its applications},
  year      = {1955},
  number    = {2},
  pages     = {285--309},
  volume    = {5},
  publisher = {Pacific Journal of Mathematics},
}

@MastersThesis{Tra12,
  author = {Dmytro Traytel},
  school = {Technische Universit{\"{a}}t M{\"{u}}nchen},
  title  = {A category theory based (co)datatypepackage for {I}sabelle/{HOL}},
  year   = {2012},
}

@Article{Tro87,
  author  = {Troelstra, Anne Sjerp},
  journal = {Theoretical Computer Science},
  title   = {On the syntax of {M}artin-{L}{\"{o}}f's type theories},
  year    = {1987},
  number  = {1},
  pages   = {1--26},
  volume  = {51},
}

@Article{Urb08,
  author   = {Urban, Christian},
  journal  = {Journal of Automated Reasoning},
  title    = {Nominal techniques in {I}sabelle/{HOL}},
  year     = {2008},
  issn     = {1573-0670},
  month    = may,
  number   = {4},
  pages    = {327--356},
  volume   = {40},
  abstract = {This paper describes a formalisation of the lambda-calculus in a HOL-based theorem prover using nominal techniques. Central to the formalisation is an inductive set that is bijective with the alpha-equated lambda-terms. Unlike de-Bruijn indices, however, this inductive set includes names and reasoning about it is very similar to informal reasoning with ``pencil and paper''. To show this we provide a structural induction principle that requires to prove the lambda-case for fresh binders only. Furthermore, we adapt work by Pitts providing a recursion combinator for the inductive set. The main technical novelty of this work is that it is compatible with the axiom of choice (unlike earlier nominal logic work by Pitts et al); thus we were able to implement all results in Isabelle/HOL and use them to formalise the standard proofs for Church-Rosser, strong-normalisation of beta-reduction, the correctness of the type-inference algorithm W, typical proofs from SOS and much more.},
  day      = {01},
  doi      = {10.1007/s10817-008-9097-2},
  url      = {https://doi.org/10.1007/s10817-008-9097-2},
}

@InProceedings{UTS17,
  author    = {Unno, Hiroshi and Torii, Sho and Sakamoto, Hiroki},
  booktitle = {Proceedings of the 29\textsuperscript{th} International Conference on Computer Aided Verification (CAV'17)},
  title     = {Automating induction for solving {H}orn clauses},
  year      = {2017},
  pages     = {571--591},
  publisher = {Springer},
  volume    = {10427},
  abstract  = {Verification problems of programs in various paradigms can be reduced to problems of solving Horn clause constraints on predicate variables that represent unknown inductive invariants. This paper presents a novel Horn constraint solving method based on inductive theorem proving: the method reduces Horn constraint solving to validity checking of first-order formulas with inductively defined predicates, which are then checked by induction on the derivation of the predicates. To automate inductive proofs, we introduce a novel proof system tailored to Horn constraint solving, and use a PDR-based Horn constraint solver as well as an SMT solver to discharge proof obligations arising in the proof search. We prove that our proof system satisfies the soundness and relative completeness with respect to ordinary Horn constraint solving schemes. The two main advantages of the proposed method are that (1) it can deal with constraints over any background theories supported by the underlying SMT solver, including nonlinear arithmetic and algebraic data structures, and (2) the method can verify relational specifications across programs in various paradigms where multiple function calls need to be analyzed simultaneously. The class of specifications includes practically important ones such as functional equivalence, associativity, commutativity, distributivity, monotonicity, idempotency, and non-interference. Our novel combination of Horn clause constraints with inductive theorem proving enables us to naturally and automatically axiomatize recursive functions that are possibly non-terminating, non-deterministic, higher-order, exception-raising, and over non-inductively defined data types. We have implemented a relational verification tool for the OCaml functional language based on the proposed method and obtained promising results in preliminary experiments.},
  isbn      = {978-3-319-63390-9},
}

@Article{vBJut93,
  author  = {van Benthem Jutting, L. S.},
  journal = {Information and Computation},
  title   = {Typing in pure type systems},
  year    = {1993},
  number  = {1},
  pages   = {30--41},
  volume  = {105},
}

@InProceedings{VBT98,
  author    = {Visser, Eelco and Benaissa, Zine-el-Abidine and Tolmach, Andrew},
  booktitle = {Proceedings of the Third ACM SIGPLAN International Conference on Functional Programming (ICFP'98)},
  title     = {Building program optimizers with rewriting strategies},
  year      = {1998},
  pages     = {13--26},
  publisher = {ACM},
}

@Article{vdBHKO02,
  author  = {van den Brand, Mark and Heering, Jan and Klint, Paul and Olivier, Pieter A.},
  journal = {ACM Transactions on Programming Languages and Systems (TOPLAS'02)},
  title   = {Compiling language definitions: {T}he {ASF+SDF} compiler},
  year    = {2002},
  number  = {4},
  pages   = {334--368},
  volume  = {24},
}

@PhdThesis{Vis97,
  author = {Eelco Visser},
  school = {University of Amsterdam},
  title  = {Syntax definition for language prototyping},
  year   = {1997},
}

@Article{VMK13,
  author    = {Virtema, Jonni and Meyers, Jeremy and Kuusisto, Antti},
  journal   = {Logical Methods in Computer Science},
  title     = {Undecidable first-order theories of affine geometries},
  year      = {2013},
  number    = {4},
  pages     = {1--23},
  volume    = {9},
  doi       = {10.2168/LMCS-9(4:26)2013},
  publisher = {IEEE},
}

@InProceedings{vOhe01,
  author    = {von Oheimb, David},
  booktitle = {Concurrency and Computation: Practice and Experience},
  title     = {{H}oare logic for {J}ava in {I}sabelle/{HOL}},
  year      = {2001},
  pages     = {1173--1214},
}

@Article{Wal00,
  author    = {Walukiewicz, Igor},
  journal   = {Information and Computation},
  title     = {Completeness of {K}ozen's axiomatisation of the propositional $\mu$-calculus},
  year      = {2000},
  number    = {1-2},
  pages     = {142--182},
  volume    = {157},
  publisher = {Elsevier},
}

@Article{Wang52,
  author    = {H. Wang},
  journal   = {J. Symb. Log.},
  title     = {Logic of many-sorted theories},
  year      = {1952},
  pages     = {105--116},
  volume    = {17},
  optnumber = {2},
}

@InCollection{ZWL13,
  author    = {Zhao, Liang and Wang, Shuling and Liu, Zhiming},
  booktitle = {Theories of Programming and Formal Methods: Essays Dedicated to Jifeng He on the Occasion of His 70\textsuperscript{th} Birthday},
  publisher = {Springer},
  title     = {Graph-based object-oriented {H}oare logic},
  year      = {2013},
  pages     = {374--393},
}

@Article{ZX04,
  author     = {Zhang, Yingzhou and Xu, Baowen},
  journal    = {ACM SIGPLAN Notices},
  title      = {A survey of semantic description frameworks for programming languages},
  year       = {2004},
  issn       = {0362-1340},
  number     = {3},
  pages      = {14--30},
  volume     = {39},
  acmid      = {981013},
  file       = {:A survey of semantic description frameworks for programming languages.pdf:PDF},
  issue_date = {March 2004},
  keywords   = {axiomatic semantics, denotational semantics, formal semantics, hybrid semantics, operational semantics, semantic description frameworks},
  numpages   = {17},
  publisher  = {ACM},
  url        = {http://doi.acm.org.proxy2.library.illinois.edu/10.1145/981009.981013},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: saveActions:enabled;
all-text-fields[identity,html_to_latex,unicode_to_latex,ordinals_to_superscript]
date[normalize_date]
month[normalize_month]
pages[normalize_page_numbers]
;}

@Comment{jabref-meta: saveOrderConfig:specified;bibtexkey;false;abstract;false;abstract;false;}
